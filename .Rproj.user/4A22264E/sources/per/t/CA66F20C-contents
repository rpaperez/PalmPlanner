# install archimedR
# if (require('archimedR')==F){
#   install.packages('remotes')
#   remotes::install_github('VEZY/archimedR')
#  
# }
# 
# if (require('Vpalmr')==F){
# install.packages("devtools")
# devtools::install_github("VEZY/Vpalmr")
# }

packs <- c("lubridate", "stringr", 'tidyverse','viridis','Vpalmr','data.table','yaml','archimedR','png','cowplot')
InstIfNec<-function (pack) {
  if (!do.call(require,as.list(pack))) {
    do.call(install.packages,as.list(pack))  }
  do.call(require,as.list(pack)) }
lapply(packs, InstIfNec)


# inputs ------------------------------------------------------------------


myTheme=theme_minimal() %+replace% 
  theme( 
    panel.background = element_rect(fill = "white", 
                                    colour = NA), panel.border = element_rect(fill = NA, 
                                                                              colour = "grey20"),
    text = element_text( face = "plain",  size = 14,
                         angle = 0, lineheight = 0.9),
    plot.title = element_text(size = rel(1.2)),
    axis.text = element_text(face = "plain", size = 10)
  )

# FORMAT TREE -------------------------------------------------------------


new_format_tree=function (data) 
{
  paramNames = c(paste("Modelled Months After Planting = "), 
                 paste("long seed = "), 
                 paste("int nbLeafEmitted = "), 
                 paste("double frondPhyllo_M = "), 
                 paste("double frondPhyllo_SD = "), 
                 paste("double H0 = "), 
                 paste("double coefStemHeight = "), 
                 paste("double residStemHeight= "), 
                 paste("double trunkBending_M = "), 
                 paste("double trunkBending_SD = "), 
                 paste("int nbFronds_M = "), 
                 paste("int nbFronds_SD = "), 
                 paste("double stemDiamMax = "), 
                 paste("double stemDiamSlope = "), 
                 paste("double stemDiamInfl = "), 
                 paste("double residStemDiam = "),
                 paste("double decliCintercept ="), 
                 paste("double decliCslope ="),
                 paste("double cPointAngle_SDP ="), 
                 paste("double rachisTwistIniAngle_M ="), 
                 paste("double rachisTwistIniAngle_SDP ="), 
                 paste("double petioleRachisRatio_M ="), 
                 paste("double petioleRachisRatio_SD ="), 
                 paste("double leafLengthIntercept ="), 
                 paste("double leafLengthSlope ="), 
                 paste("double rachisLength_SDP ="), 
                 paste("double[] rachisBiomass ="),
                 paste("double laminaAngle = "),
                 paste("double nbMax ="), 
                 paste("double nbSlope ="),
                 paste("double nbInfl ="), 
                 paste("double nbLeaflets_SDP ="), 
                 paste("double coefDispo= "), 
                 paste("double Dispo_SDP= "), 
                 paste("double pointBrelativePosition_M= "), 
                 paste("double pointBrelativePosition_SD= "), 
                 paste("double lenfletLengthAtBIntercept = "), 
                 paste("double leafletLengthAtBSlope = "),
                 paste("double lengthFirst = "), 
                 paste("double lengthLast = "), 
                 paste("double posLengthMax = "), 
                 paste("double widthFirst = "), 
                 paste("double widthLast = "), 
                 paste("double posWidthMax = "),
                 paste("double bWidthIntercept = "), 
                 paste("double bWidthSlope ="), 
                 paste("double xm_intercept= "), 
                 paste("double xm_slope= "),
                 paste("double ym_intercept= "), 
                 paste("double ym_slope= "), 
                 paste("double leafletAxialAngleC = "), 
                 paste("double leafletAxialAngleA = "), 
                 paste("double leafletAxialAngleSlope = "), 
                 paste("double leafletAxialAngle_SDP = "), 
                 paste("double leafletStiffness = "), 
                 paste("double leafletStiffness_SD ="), 
                 paste("double[] leafletFrequencyHigh ="), 
                 paste("double[] leafletFrequencyLow ="), 
                 paste("int nbInflorescences ="), 
                 paste("double frondBaseWidth = "), 
                 paste("double frondCpointWidthIntercept = "), 
                 paste("double frondCpointWidthSlope = "), 
                 paste("double frondtipWidth = "), 
                 paste("double frondBaseHeight = "), 
                 paste("double frondTipHeight = "), 
                 paste("double heightWidthCRatio = "),
                 paste("double rachisHeightTappering = "), 
                 paste("double leafletRadialHighA0Sup= "),
                 paste("double leafletRadialHighAmaxSup= "), 
                 paste("double leafletRadialHighA0Inf= "),
                 paste("double leafletRadialHighAmaxInf= "), 
                 paste("double leafletRadialLowA0Sup= "),
                 paste("double leafletRadialLowAmaxSup= "), 
                 paste("double leafletRadialLowA0Inf= "),
                 paste("double leafletRadialLowAmaxInf= "),
                 paste("double elastic_modulus= "),
                 paste("double shear_modulus= "))
  
  paramValue = list(data$MAP_requested, 
                    data$seed, 
                    data$nbLeafEmitted, 
                    data$frondPhyllo_M,
                    data$frondPhyllo_SD, 
                    data$H0, 
                    data$coefStemHeight, 
                    data$residStemHeight,
                    data$trunkBending_M, 
                    data$trunkBending_SD, 
                    data$nbFronds_M, 
                    data$nbFronds_SD, 
                    data$stemDiamMax, 
                    data$stemDiamSlope, 
                    data$stemDiamInfl,
                    data$residStemDiam, 
                    data$decliCintercept, 
                    data$decliCslope,
                    data$cPointAngle_SDP, 
                    data$rachisTwistIniAngle_M, 
                    data$rachisTwistIniAngle_SDP, 
                    data$petioleRachisRatio_M,
                    data$petioleRachisRatio_SD, 
                    data$leafLengthIntercept , 
                    data$leafLengthSlope,
                    data$rachisLength_SDP,
                    ifelse(!is.null(data$rachisBiomass) || 
                             !is.na(data$rachisBiomass), paste(list(data$rachisBiomass)), 
                           NULL),
                    data$laminaAngle, 
                    data$nbMax,
                    data$nbSlope,
                    data$nbInfl,
                    data$nbLeaflets_SDP, 
                    data$coefDispo, 
                    data$Dispo_SDP, 
                    data$pointBrelativePosition_M, 
                    data$pointBrelativePosition_SD,
                    data$lenfletLengthAtBIntercept, 
                    data$leafletLengthAtBSlope, 
                    data$lengthFirst, 
                    data$lengthLast, 
                    data$posLengthMax, 
                    data$widthFirst, 
                    data$widthLast, 
                    data$posWidthMax, 
                    data$bWidthIntercept, 
                    data$bWidthSlope, 
                    data$xm_intercept, 
                    data$xm_slope,
                    data$ym_intercept, 
                    data$ym_slope,
                    data$leafletAxialAngleC,
                    data$leafletAxialAngleA, 
                    data$leafletAxialAngleSlope,
                    data$leafletAxialAngle_SDP, 
                    data$leafletStiffness,
                    data$leafletStiffness_SD, 
                    ifelse(!is.null(data$leafletFrequencyHigh) || 
                             !is.na(data$leafletFrequencyHigh), paste(list(data$leafletFrequencyHigh)), 
                           NULL), 
                    ifelse(!is.null(data$leafletFrequencyLow) || 
                             !is.na(data$leafletFrequencyLow), paste(list(data$leafletFrequencyLow)), 
                           NULL), data$nbInflorescences, 
                    data$frondBaseWidth, 
                    data$frondCpointWidthIntercept, 
                    data$frondCpointWidthSlope, 
                    data$frondtipWidth, 
                    data$frondBaseHeight,
                    data$frondTipHeight, 
                    data$heightWidthCRatio,
                    data$rachisHeightTappering, 
                    data$leafletRadialHighA0Sup, 
                    data$leafletRadialHighAmaxSup, 
                    data$leafletRadialHighA0Inf,
                    data$leafletRadialHighAmaxInf, 
                    data$leafletRadialLowA0Sup,
                    data$leafletRadialLowAmaxSup, 
                    data$leafletRadialLowA0Inf, 
                    data$leafletRadialLowAmaxInf,
                    data$elastic_modulus,
                    data$shear_modulus 
                    
  )
  no_val = unlist(lapply(paramValue, function(x) is.null(x) || 
                           is.na(x)))
  if (any(no_val)) {
    stop("Missing value for VPalm parameter:", paste(gsub("=|double|long|int|\\[|\\]", 
                                                          "", paramNames[no_val]), collapse = ", "))
  }
  tibble::tibble(name = paramNames, value = unlist(paramValue))
}



# GENERATE VPalm parameters -----------------------------------------------


source('1-code/VegetativeGrowth.R')


Generate_Vpalm_param=function(MAP_requested=MAP_requested,elastic_modulus=elastic_modulus,shear_modulus=shear_modulus,filename=filename){
  
  list_param=readRDS('0-data/vpalm_template.rds')
  
  ###inputs
  coefPhylo=2.16
  nbLeafEmitted=round(MAP_requested*coefPhylo)
  nbLeaves=45
  
  # elastic_modulus=3026
  # shear_modulus =125
  
  leafLengthSlope=0.05707789
  leafLengthIntercept=353.9938
  
  
  ranks=seq(1,nbLeaves,1)
  
  seed=1
  
  ### stem height
  
  
  stem_height=stem_height(X = MAP_requested,slope1= coef(modStem)['slope1'],slope2=coef(modStem)['slope2'],breakMAP=breakMAP)
  
  # stem height in Vpalm (y0+exp(coefStem*nbLeafEmitted))
  y0= 5
  list_param$residStemHeight=0
  list_param$coefStemHeight=log(stem_height-y0)/nbLeafEmitted
  
  ## rachis length
  seqNbL=seq(nbLeafEmitted-nbLeaves+1,nbLeafEmitted,1)
  seq_rac=data.frame(nbLeafEmitted=seqNbL,rank=rev(c(1:45)))%>%
    mutate(racL=sigmo(x=nbLeafEmitted,max=coef(modRac)['max'],slp=coef(modRac)['slp'],infl=coef(modRac)['infl']))
  
  modRachisL=nls(data = seq_rac,
                 formula =
                   racL ~ a*rank+b,
                 start= c(a=1,b=0),trace = F)
  
  rachisLengthIntercept=coef(modRachisL)['b']
  rachisLengthSlope=coef(modRachisL)['a']
  
  seq_rac=seq_rac%>%
    mutate(racL_sim=predict(modRachisL))

  # ggplot()+
  #   geom_point(data=seq_rac,aes(x=rank,y=racL))+
  #   geom_line(data=seq_rac,aes(x=rank,y=racL_sim,col='sim'))
  
  set.seed(seed = seed)
  
  rachisLenght_sim0=rachisLengthIntercept+ranks*rachisLengthSlope
  
  rachisLenght_sim=rachisLenght_sim0+rnorm(n =length(rachisLenght_sim0),mean = 0,sd = list_param$rachisLength_SDP)
  
  rachisLenght_sim=rachisLenght_sim0+rnorm(n =length(rachisLenght_sim0),mean = 0,sd = list_param$rachisLength_SDP)
  
  dif_racL=mean(rachisLenght_sim)-mean(seq_rac$racL)
  print(paste('Average error between observed and simualted rachis lenght:',dif_racL,'cm'))
  
  rachisFW_sim=(rachisLenght_sim-leafLengthIntercept)/leafLengthSlope
  
  list_param$rachisBiomass=round(rachisFW_sim)
  
  ### set params
  list_param$nbFronds_M=nbLeaves
  list_param$MAP_requested=MAP_requested
  list_param$nbLeafEmitted=nbLeafEmitted
  list_param$rachisTwistIniAngle_M = 4
  list_param$rachisTwistIniAngle_SDP = 2
  
  list_param$leafLengthSlope=leafLengthSlope
  
  list_param$leafLengthIntercept=leafLengthIntercept
  
  list_param$elastic_modulus=elastic_modulus
  list_param$shear_modulus =shear_modulus
  
  list_param$seed=seed
  
  
  VPalm_param=new_format_tree(data = list_param)
  
  # filename=paste0('Mockup_seed',seed)
  
  test_params = Vpalmr::write_tree(data = VPalm_param, path = "2-outputs/Generate_VPalm_param/",
                                   name= filename, verbose = F, overwrite = TRUE)
  
}



# DESIGN ------------------------------------------------------------------




#' Get quinconx design for Archimed scene
#'
#' @param dist_inter : inter row distance (m)
#' @param dist_intra : intra row distance (m)
#'
#' @return 
#' @export
#'
#' @examples
design=function(dist_inter= NULL, dist_intra= NULL){
  
  # Voronoi of the quincunx design:
  voronoi_plot= data.frame(x= c(dist_inter/2,dist_inter/2+dist_inter),
                           y= c(dist_intra/4,dist_intra/4+dist_intra/2),
                           xmin= c(0,0), xmax= rep(dist_inter*2,2),
                           ymin= c(0,0), ymax= rep(dist_intra,2))
  
  
  # number of raow and columns in 1 ha
  nbRow=ceiling(100/dist_inter)
  nbCol=ceiling(100/dist_intra)
  
  # Matrix of the design (each cell is a Voronoi):
  mat_plot= expand.grid(nbRow= 1:nbRow, nbCol= 1:nbCol)
  
  # density
  density=floor(nrow(voronoi_plot)/(unique(voronoi_plot$xmax)*unique(voronoi_plot$ymax))*10000)
  
  
  # Full design:
  design=
    mapply(function(nbRow,nbCol){
      voronoi_plot%>%
        dplyr::select(x,y,xmax,ymax,xmin,ymin)%>%
        dplyr::mutate(xmin= xmax*(nbRow-1), ymin= ymax*(nbCol-1),
                      x= x+xmin, y= y+ymin,
                      xmax= xmax*nbCol, ymax= ymax*nbRow,
                      nbCol= nbCol, nbRow= nbRow)
    }, nbRow= mat_plot$nbRow, nbCol= mat_plot$nbCol)%>%t()%>%
    dplyr::as_tibble()%>%
    tidyr::unnest(cols = c(x, y, xmax, ymax, xmin, ymin, nbCol, nbRow))%>%
    dplyr::mutate(xmax= max(xmax), ymax= max(ymax),
                  xmin= min(xmin), ymin= min(ymin))
  
  # plot:
  plot_bounds=
    design%>%
    ggplot2::ggplot(ggplot2::aes(x= x, y= y))+
    ggplot2::geom_point(shape=8,col='forestgreen')+
    ggplot2::ylim(low= 0, high= 100)+
    ggplot2::xlim(low= 0, high=100)+
    ylab('Intra row distance (m)')+
    xlab('Inter row distance (m)')+
    ggtitle(paste(density,' plants.ha-1'))
  
  # result to export scene pattern
  result=
    voronoi_plot%>%
    dplyr::mutate(z= 0.0, scale= 1.0,
                  inclinationAzimut= 0.0, inclinationAngle= 0.0,
                  stemTwist= 0.0)
  
  list(design=design,result= result, plot= plot_bounds,density=density)
  
}


# function ----------------------------------------------------------------

# nbRow=10
# nbCol=10

#' Function to generate OPS  and visualization of the designs
#'
#' @param dist_intra distance within row of palm trees (m)
#' @param dist_inter distance between rows of palm trees (m)
#' @param dist_intercrop distance between multiple rows of palm trees (m), for intercropping 
#' @param designType type of design (square,quincunx,quincunx2,quincunx3,quincunx4,quincunx5)
#' @param orientation orientation of the scene ('NS': North-South or 'EW': East-West)
#' @param pointSize size of point in the plot
#'
#' @return
#' @export
#'
#' @examples
generate_design=function(dist_intra=NULL,dist_inter=NULL,dist_intercrop=NULL,designType=NULL,orientation=orientation,pointSize=5){
  
  # l=9.21
  # h=sqrt(3*l**2/4)
  # dist_intra=l
  # dist_intercrop=2*h
  # dist_inter=h
  # designType='square'
  
  if (!designType %in% c('square','quincunx','quincunx2','quincunx3','quincunx4','quincunx5')){
    print('please select a designType among square quincunx quincunx2  quincunx3 quincunx4 quincunx5')
    return(NULL)
  }
  # Voronoi of the design:
  
  if (designType=='square'){
    if(!is.null(dist_intercrop)){
      print('dist_intercrop is not considered in square design')
      return(NULL)}
    
    x1=dist_inter/2
    y1=dist_intra/2
    xmax=x1+dist_inter/2
    ymax=y1+dist_intra/2
    
    voronoi_plot=data.frame(x= x1,
                            y= y1,
                            xmin= 0,xmax=xmax,
                            ymin= 0, ymax= ymax)
  }
  
  if (designType=='quincunx'){
    if(!is.null(dist_intercrop)){
      print('dist_intercrop is not considered in quinconx design')
      return(NULL)}
    
    x1=dist_inter/2
    y1=dist_intra/4
    x2=dist_inter/2+dist_inter
    y2=dist_intra/4+dist_intra/2
    xmax=x2+dist_inter/2
    ymax=y2+dist_intra/4
    
    voronoi_plot=data.frame(x= c(x1,x2),
                            y= c(y1,y2),
                            xmin= 0,xmax=xmax,
                            ymin= 0, ymax= ymax)
  }
  
  if (designType=='quincunx2'){
    if(is.null(dist_intercrop)){
      print('please provide dist_intercrop in quinconx2 design')
      return(NULL)}
    
    x1=dist_inter/2
    y1=dist_intra/4
    x2=dist_inter/2+dist_intercrop
    y2=dist_intra/4+dist_intra/2
    xmax=dist_inter+dist_intercrop
    ymax=dist_intra
    
    voronoi_plot= data.frame(x= c(x1,x2),
                             y= c(y1,y2),
                             xmin= 0,xmax=xmax,
                             ymin= 0, ymax= ymax)
    
  }
  
  if (designType=='quincunx3'){
    if(is.null(dist_intercrop)){
      print('please provide dist_intercrop in quinconx3 design')
      return(NULL)}
    
    x1=dist_inter/2
    y1=dist_intra/4
    x2=x1+dist_inter
    y2=y1+dist_intra/2
    x3=x2+dist_intercrop
    y3=y2
    xmax=x3+dist_inter/2
    ymax=y3+dist_intra/4
    
    voronoi_plot= data.frame(x= c(x1,x2,x3),
                             y= c(y1,y2,y3),
                             xmin= 0, xmax= xmax,
                             ymin= 0, ymax= ymax)
    
  }
  
  
  if (designType=='quincunx4'){
    if(is.null(dist_intercrop)){
      print('please provide dist_intercrop in quinconx4 design')
      return(NULL)}
    
    x1=dist_inter/2
    y1=dist_intra/4
    x2=x1+dist_inter
    y2=y1+dist_intra/2
    x3=x2+dist_intercrop
    y3=y1
    x4=x3+dist_inter
    y4=y2
    xmax=x4+dist_inter/2
    ymax=y4+dist_intra/4
    
    voronoi_plot= data.frame(x= c(x1,x2,x3,x4),
                             y= c(y1,y2,y3,y4),
                             xmin= 0, xmax= xmax,
                             ymin= 0, ymax= ymax)
    
  }
  
  if (designType=='quincunx5'){
    if(is.null(dist_intercrop)){
      print('please provide dist_intercrop in quinconx5 design')
      return(NULL)}
    
    
    x1=dist_inter/2
    y1=dist_intra/4
    x2=x1+dist_inter
    y2=y1+dist_intra/2
    x3=x2+dist_intercrop
    y3=y2
    x4=x3+dist_inter
    y4=y1
    x5=x4+dist_inter
    y5=y3
    xmax=x5+dist_inter/2
    ymax=y5+dist_intra/4
    
    voronoi_plot= data.frame(x= c(x1,x2,x3,x4,x5),
                             y= c(y1,y2,y3,y4,y5),
                             xmin= 0, xmax= xmax,
                             ymin= 0, ymax= ymax)
    
  }
  
  
  if (designType %in% c('square','quincunx')){
    dist_intercrop=0}
  # number of raow and columns in 1 ha
  repRows=ceiling(100/dist_inter+dist_intercrop)
  repCol=ceiling(100/dist_intra)
  
  # number of raow and columns in 1 ha
  
  
  # Matrix of the design (each cell is a Voronoi):
  mat_plot= expand.grid(repRows= 1:repRows, repCol= 1:repCol)
  
  # density
  density=floor(nrow(voronoi_plot)/(unique(voronoi_plot$xmax)*unique(voronoi_plot$ymax))*10000)
  
  
  # Full design:
  design=
    mapply(function(repRows,repCol){
      voronoi_plot%>%
        dplyr::select(x,y,xmax,ymax,xmin,ymin)%>%
        dplyr::mutate(xmin= xmax*(repRows-1), ymin= ymax*(repCol-1),
                      x= x+xmin, y= y+ymin,
                      xmax= xmax*repCol, ymax= ymax*repRows,
                      repCol= repCol, repRows= repRows)
    }, repRows= mat_plot$repRows, repCol= mat_plot$repCol)%>%t()%>%
    dplyr::as_tibble()%>%
    tidyr::unnest(cols = c(x, y, xmax, ymax, xmin, ymin, repCol, repRows))%>%
    dplyr::mutate(xmax= max(xmax), ymax= max(ymax),
                  xmin= min(xmin), ymin= min(ymin))
  
  # plot:
  
  
  if(orientation=='NS'){
  plot_bounds=
    design%>%
    ggplot2::ggplot(ggplot2::aes(x= x, y= y))+
    ggplot2::geom_point(shape=8,col='forestgreen',size=pointSize)+
    ylab('Intra row distance (m)')+
    xlab('Inter row distance (m)')+
    xlim(c(0,100))+
    ylim(c(0,100))+
    ggtitle(paste(density,' plants.ha-1'))+
    coord_equal()+
    myTheme
  }
  
  if(orientation=='EW'){
    plot_bounds=design%>%
      ggplot2::ggplot(ggplot2::aes(x= y, y= x))+
      ggplot2::geom_point(shape=8,col='forestgreen',size=pointSize)+
      xlab('Intra row distance (m)')+
      ylab('Inter row distance (m)')+
      xlim(c(0,100))+
      ylim(c(0,100))+
      ggtitle(paste(density,' plants.ha-1'))+
      coord_equal()+
      myTheme
    
    
  }
  
  im=readPNG("north.png")
  
  visu=ggdraw() +
    draw_plot(plot_bounds) +
    draw_image(im,x = 0.4,y = 0.4,scale=0.1)
  
  # result to export scene pattern
  result=
    voronoi_plot%>%
    dplyr::mutate(z= 0.0, scale= 1.0,
                  inclinationAzimut= 0.0, inclinationAngle= 0.0,
                  stemTwist= 0.0)
  
  list(design=design,result= result, plot= visu,density=density)
  
}






# CREATE OPS --------------------------------------------------------------


#' Function to generate ops
#'
#' @param opfname name of the opf to call 
#' @param dist_intra distance within row of palm trees (m)
#' @param dist_inter distance between rows of palm trees (m)
#' @param dist_intercrop distance between multiple rows of palm trees (m), for intercropping 
#' @param designType type of design (square,quincunx,quincunx2,quincunx3,quincunx4,quincunx5)
#' @return ops file
#' @export
#'
#' @examples
create.ops=function(opfname='opfname',dist_inter= NULL, dist_intra= NULL,dist_intercrop=NULL,designType=NULL,orientation=orientation,writeOPS=T,pathOPS=NULL){
  
  
  ### generate the design
  
  des=generate_design(dist_inter =dist_inter, dist_intra=dist_intra,dist_intercrop =dist_intercrop,designType = designType,orientation = orientation,pointSize = 3)$result
  
  
  xmin=unique(des$xmin)
  xmax=unique(des$xmax)
  ymin=unique(des$ymin)
  ymax=unique(des$ymax)
  zmin=0
  
  
  ###generate ligne of config file for each tree
  
  table=NULL
  for (t in 1:nrow(des)){
    tableSub=paste(1,t,paste('opf/',opfname,'.opf',sep=''),des$x[t],des$y[t],des$z[t],des$scale[t],des$inclinationAzimut [t],des$inclinationAngle[t],des$stemTwist[t],sep='	')
    table=rbind(table,tableSub)
  }
  
  if (nrow(des)==2){
    ops.file=c(
      paste('# T xmin ymin zmin xmax ymax flat'),
      paste('T', xmin, ymin, zmin, xmax,ymax,'flat'),
      paste('#[Archimed] elaeis'),
      paste('#sceneId objectId FilePath x y z scale inclinationAzimut inclinationAngle rotation'),
      paste(table[1,]),
      paste(table[2,],collapse=' ')
    )
  }
  
  if (nrow(des)==3){
    ops.file=c(
      paste('# T xmin ymin zmin xmax ymax flat'),
      paste('T', xmin, ymin, zmin, xmax,ymax,'flat'),
      paste('#[Archimed] elaeis'),
      paste('#sceneId objectId FilePath x y z scale inclinationAzimut inclinationAngle rotation'),
      paste(table[1,]),
      paste(table[2,],collapse=' '),
      paste(table[3,],collapse=' ')
    )
  }
  if (nrow(des)==4){
    ops.file=c(
      paste('# T xOrigin yOrigin zOrigin xSize ySize flat'),
      paste('T', xmin, ymin, zmin, xmax,ymax,'flat'),
      paste('#[Archimed] elaeis'),
      paste('#sceneId plantId plantFileName x y z scale inclinationAzimut inclinationAngle stemTwist'),
      paste(table[1,]),
      paste(table[2,],collapse=' '),
      paste(table[3,],collapse=' '),
      paste(table[4,],collapse=' ')
    )
  }
  
  if (nrow(des)==5){
    ops.file=c(
      paste('# T xOrigin yOrigin zOrigin xSize ySize flat'),
      paste('T', xmin, ymin, zmin, xmax,ymax,'flat'),
      paste('#[Archimed] elaeis'),
      paste('#sceneId plantId plantFileName x y z scale inclinationAzimut inclinationAngle stemTwist'),
      paste(table[1,]),
      paste(table[2,],collapse=' '),
      paste(table[3,],collapse=' '),
      paste(table[4,],collapse=' '),
      paste(table[5,],collapse=' ')
    )
  }
  
  if (nrow(des)>5){
    print('more than 5 opfs are not implemented')
    return(NULL)
  }
  if (writeOPS==T){
    
    if (designType %in% c('square','quincunx')){
      write(ops.file,file= paste0(pathOPS,'/',designType,'_inter',dist_inter,'_intra',dist_intra,'_',opfname,'.ops')) 
      
    }
    if (!(designType %in% c('square','quincunx'))){
     write(ops.file,file= paste0(pathOPS,'/',designType,'_inter',dist_inter,'_intra',dist_intra,'_intercrop',dist_intercrop,'_',opfname,'.ops')) ###wrtie the ops
    }
    
  }
  return(ops.file)
  
}



#' read and adapt ops template file
#'
#' @param path path to the template ops file
#' @param opfname name of the opf
#' @param pathOPS path of the ops to write
#'
#' @return ops file
#' @export
#'
#' @examples
# read_write_ops=function(path='filepath',opfname='opfname',pathOPS='pathOPS'){
#   
#   # path='0-data/Ops_template/DesignC.ops'
#   # opfname="MockUpA_seed1_MAP_60.opf"
#   # pathOPS = paste0('2-outputs/Run_archimed/scene/',ops_name)
#   ops_1=read.table(file =path,skip = 1,nrow=1)
#   
#   ops_2=read.table(file =path,skip = 4)
#   
#   for (i in 1:nrow(ops_2)){
#     ops_2[i,3]=paste0('opf/',opfname)
#   }
#   
#   
#   
#   if (nrow(ops_2)==1){
#     ops.file=c(
#       paste('# T xmin ymin zmin xmax ymax flat'),
#       paste('T', ops_1[1,2], ops_1[1,3], ops_1[1,4], ops_1[1,5],ops_1[1,6],'flat'),
#       paste('#[Archimed] elaeis'),
#       paste('#sceneId objectId FilePath x y z scale inclinationAzimut inclinationAngle rotation'),
#       paste(ops_2[1,],collapse=' ')
#     )
#   }
#   
#   if (nrow(ops_2)==2){
#     ops.file=c(
#       paste('# T xmin ymin zmin xmax ymax flat'),
#       paste('T', ops_1[1,2], ops_1[1,3], ops_1[1,4], ops_1[1,5],ops_1[1,6],'flat'),
#       paste('#[Archimed] elaeis'),
#       paste('#sceneId objectId FilePath x y z scale inclinationAzimut inclinationAngle rotation'),
#       paste(ops_2[1,],collapse=' '),
#       paste(ops_2[2,],collapse=' ')
#     )
#   }
#   
#   
#   if (nrow(ops_2)==3){
#     ops.file=c(
#       paste('# T xmin ymin zmin xmax ymax flat'),
#       paste('T', ops_1[1,2], ops_1[1,3], ops_1[1,4], ops_1[1,5],ops_1[1,6],'flat'),
#       paste('#[Archimed] elaeis'),
#       paste('#sceneId objectId FilePath x y z scale inclinationAzimut inclinationAngle rotation'),
#       paste(ops_2[1,],collapse=' '),
#       paste(ops_2[2,],collapse=' '),
#       paste(ops_2[3,],collapse=' ')
#     )
#     
#   }
#   
#   if (nrow(ops_2)==4){
#     
#     ##replace low density row mock up with a control mock up
#     ops_2[4,3]=str_replace(string = ops_2[4,3],pattern = 'MockUpC',replacement = 'MockUpA')
#     
#     ops.file=c(
#       paste('# T xmin ymin zmin xmax ymax flat'),
#       paste('T', ops_1[1,2], ops_1[1,3], ops_1[1,4], ops_1[1,5],ops_1[1,6],'flat'),
#       paste('#[Archimed] elaeis'),
#       paste('#sceneId objectId FilePath x y z scale inclinationAzimut inclinationAngle rotation'),
#       paste(ops_2[1,],collapse=' '),
#       paste(ops_2[2,],collapse=' '),
#       paste(ops_2[3,],collapse=' '),
#       paste(ops_2[4,],collapse=' ')
#     )
#   }
#   
#   
#   
#   write(x = ops.file,file = pathOPS)
# }


# RUN SIMU ----------------------------------------------------------------

#' Run VPalm and Archimed simulation
#'@param MAP: months after planting
#'@param d_inter: distance between rows of palm trees
#'@param d_intra: distance within rows of palm trees
#'@param d_intercrop: distance for intercrop
#' @param designType type of design (square,quincunx,quincunx2,quincunx3,quincunx4,quincunx5)
#' @param pathVpalmParam path to paramFileName
#' @param  path_designs path to save planting designs
#' @param pathArchimed path to archimed jar
#' @param pathVpalmJar path to Vpalm Jar
#' @param pathOpf Path where opf is written
#' @param pathOPS path where ops is written
#' @param run_photosynthesis run phototsynthesis (T or F)
#' @param opfStepExport step of simulation when the opf is exported (numeric 0-28)
#' @param overwrite overwrite existing simulation
#' @param orientation orientation of the scene (NS: North-South or EW: East-West)
#'
#' @return
#' @export
#'
#' @examples
RunSimu=function(MAP=MAP,d_inter=d_inter,d_intra=d_intra,d_intercrop=d_intercrop,designType=designType,pathVpalmParam=pathVpalmParam,pathArchimed=pathArchimed,path_designs=path_designs,pathVpalmJar=pathVpalmJar,pathOpf=pathOpf,pathOPS=pathOPS,run_photosynthesis=T,opfStepExport=14,overwrite=F,orientation='NS'){
  
  # paramFileName='Mockup_seed1_MAP_180'
  # d_inter=8
  # d_intra=5
  # d_intercrop=12
  # designType='quincunx2'
  # path_designs='./2-outputs/Run_simu/planting_designs/'
  # pathVpalmParam='./2-outputs/Generate_VPalm_param/'
  # pathArchimed='./1-code/archimed-phys.jar'
  # pathVpalmJar='./1-code/vpalm_biomech.jar'
  # pathOpf='./2-outputs/Run_simu/ops/opf/'
  # pathOPS='./2-outputs/Run_simu/ops/'
  # onlyArchimed=F
  # opfStepExport=14
  # run_photosynthesis=F
  # overwrite=T
  
  paramFileName=paste0('Mockup_seed1_MAP_',MAP)
  
  if (designType %in% c('square','quincunx')){
    design_name=paste0(designType,'_inter',d_inter,'_intra',d_intra)
    
  }
  if (!(designType %in% c('square','quincunx'))){
    design_name=paste0(designType,'_inter',d_inter,'_intra',d_intra,'_intercrop',d_intercrop)
  }
  
  folders=list.dirs(path ='./2-outputs/Run_simu/output',full.names = T)
  
  foldSim=paste0('./2-outputs/Run_simu/output/',paramFileName,'_',design_name,'_',orientation)
  
  if (foldSim %in% folders & overwrite==F){
    print(paste(foldSim,'already exists, if you want to overwrite change overwrite argument in the RunSimu function'))
  }
  
  if (!(foldSim %in% folders)){
    
    print(paste("Running simulation:",foldSim))
    
    # generate Vpalm Parameters -----------------------------------------------
  
    if(!paste0(paramFileName,'.txt') %in% list.files(path = pathVpalmParam,pattern = 'txt')){
      print(paste0('writting VPalm parameter file: ',pathVpalmParam,paramFileName,'.txt'))
      Generate_Vpalm_param(MAP_requested =MAP)
    }
    
    # generate opf ------------------------------------------------------------
  
    if(!paste0(paramFileName,'.opf') %in% list.files(path = pathOpf,pattern = 'opf')){
      print(paste0('creating opf: ',pathOpf,paramFileName,'.opf'))
      system(command = paste0('java -jar ',pathVpalmJar,' ',pathVpalmParam,paramFileName,'.txt',' ',pathOpf,paramFileName,'.opf'))
    }
  
      
    # generate ops ------------------------------------------------------------
    print('writting ops')
    create.ops(opfname =paramFileName ,dist_inter = d_inter,dist_intra = d_intra,designType = designType,dist_intercrop =d_intercrop,orientation =orientation,  writeOPS = T,pathOPS = pathOPS)
    
    ## save planting design
    print('saving planting design')
    p_design=generate_design(dist_inter =d_inter, dist_intra=d_intra,dist_intercrop =d_intercrop,designType = designType ,orientation = orientation,pointSize = 3)$result
    data.table::fwrite(x=p_design,file = paste0(path_designs,design_name,'.csv'))
    
    # generate config file ----------------------------------------------------
    
    ##"load template
    
    configYml=read_yaml(file =  '0-data/Archimed_inputs/config_template.yml')
    
    ## change names & dirs
    opsName=paste0(design_name,'_',paramFileName,'.ops')
    configYml$scene=paste0('ops/',opsName)
    configYml$simulation_directory=paste0(str_remove(string = opsName,pattern = '.ops'),'_',orientation)
    configYml$export_ops=as.character(round(opfStepExport))
    
    if (!(orientation %in% c('NS','EW'))){
      print('orientation must be NS or EW')
    }
    
    if (orientation=='EW'){
      configYml$scene_rotation=90
    }
    
    
    if (run_photosynthesis==T){
      # Absorbed light
      configYml$component_variables$Ra_PAR_0_f=T
      configYml$component_variables$Ra_NIR_0_f=T
      configYml$component_variables$Ra_PAR_0_q=T
      configYml$component_variables$Ra_NIR_0_q=T
      configYml$component_variables$Ra_PAR_f=T
      configYml$component_variables$Ra_NIR_f=T
      configYml$component_variables$Ra_TIR_f=T
      configYml$component_variables$Ra_PAR_q=T
      configYml$component_variables$Ra_NIR_q=T
      configYml$component_variables$Ra_TIR_q=T
      # Assimilation
      configYml$component_variables$An_f=T
      configYml$component_variables$An_q=T
      configYml$component_variables$Gs=T
      # Energy
      configYml$component_variables$H_q=T
      configYml$component_variables$H_f=T
      configYml$component_variables$LE_q=T
      configYml$component_variables$LE_f=T
      configYml$component_variables$Tr_f=T
      configYml$component_variables$Tr_q=T
      configYml$component_variables$T=T
    }
    
    pathConfig=paste0('2-outputs/Run_simu/',str_replace(string = opsName,pattern = '.ops',replacement = paste0('_',orientation,'.yml'))) 
    
    yaml::write_yaml(x =  configYml,file =pathConfig)
    
    debut=Sys.time()
    system(command =paste0('java -jar ',pathArchimed,' ',pathConfig))
    
    
    print(paste("compute time :",difftime(time1 = Sys.time(),time2 = debut,units = "mins"),'mins'))
  }
}
