geom_point(aes(x=x_tree_2,y=y_tree_2),pch=8,col='forestgreen',size=3)+
geom_point(aes(x=x_tree_3,y=y_tree_3),pch=8,col='forestgreen',size=3)+
geom_point(aes(x=x_tree_4,y=y_tree_4),pch=8,col='forestgreen',size=3)+
geom_point(aes(x=x_tree_5,y=y_tree_5),pch=8,col='forestgreen',size=3)+
ylim(low= 0, high= lim)+
xlim(low= 0, high=lim)+
ggtitle(paste(density,' plants.ha-1'))+
labs(y = 'Intra row distance (m)', x = 'Inter row distance (m)',fill= expression ('Transmitted light (%)'),col=expression ('Transmitted light (%)')) +
scale_fill_viridis(option = 'viridis',limits = c(0, 100))+
coord_equal()+
myTheme+
theme(legend.position = 'bottom')
}
}
if(orientation=='EW'){
if (designType =='square'){
plot=grid_fin%>%
mutate(Intercepted_rel=ifelse(Intercepted_rel>100,100,Intercepted_rel))%>%
ggplot(aes(x=y, y=x,fill=Intercepted_rel))+
geom_tile()+
geom_point(aes(x=y_tree_1,y=x_tree_1),pch=8,col='forestgreen',size=3)+
ylim(low= 0, high= lim)+
xlim(low= 0, high=lim)+
ggtitle(paste(density,' plants.ha-1'))+
labs(x = 'Intra row distance (m)', y = 'Inter row distance (m)',fill= expression ('Transmitted light (%)'),col=expression ('Transmitted light (%)')) +
scale_fill_viridis(option = 'viridis',limits = c(0, 100))+
coord_equal()+
myTheme+
theme(legend.position = 'bottom')
}
if (designType %in% c('quincunx','quincunx2','square2')){
plot=grid_fin%>%
mutate(Intercepted_rel=ifelse(Intercepted_rel>100,100,Intercepted_rel))%>%
ggplot(aes(x=y, y=x,fill=Intercepted_rel))+
geom_tile()+
geom_point(aes(x=y_tree_1,y=x_tree_1),pch=8,col='forestgreen',size=3)+
geom_point(aes(x=y_tree_2,y=x_tree_2),pch=8,col='forestgreen',size=3)+
ylim(low= 0, high= lim)+
xlim(low= 0, high=lim)+
ggtitle(paste(density,' plants.ha-1'))+
labs(x = 'Intra row distance (m)', y = 'Inter row distance (m)',fill= expression ('Transmitted light (%)'),col=expression ('Transmitted light (%)')) +
scale_fill_viridis(option = 'viridis',limits = c(0, 100))+
coord_equal()+
myTheme+
theme(legend.position = 'bottom')
}
if (designType %in% c('quincunx3')){
plot=grid_fin%>%
mutate(Intercepted_rel=ifelse(Intercepted_rel>100,100,Intercepted_rel))%>%
ggplot(aes(x=y, y=x,fill=Intercepted_rel))+
geom_tile()+
geom_point(aes(x=y_tree_1,y=x_tree_1),pch=8,col='forestgreen',size=3)+
geom_point(aes(x=y_tree_2,y=x_tree_2),pch=8,col='forestgreen',size=3)+
geom_point(aes(x=y_tree_3,y=x_tree_3),pch=8,col='forestgreen',size=3)+
ylim(low= 0, high= lim)+
xlim(low= 0, high=lim)+
ggtitle(paste(density,' plants.ha-1'))+
labs(x = 'Intra row distance (m)', y = 'Inter row distance (m)',fill= expression ('Transmitted light (%)'),col=expression ('Transmitted light (%)')) +
scale_fill_viridis(option = 'viridis',limits = c(0, 100))+
coord_equal()+
myTheme+
theme(legend.position = 'bottom')
}
if (designType %in% c('quincunx4')){
plot=grid_fin%>%
mutate(Intercepted_rel=ifelse(Intercepted_rel>100,100,Intercepted_rel))%>%
ggplot(aes(x=y, y=x,fill=Intercepted_rel))+
geom_tile()+
geom_point(aes(x=y_tree_1,y=x_tree_1),pch=8,col='forestgreen',size=3)+
geom_point(aes(x=y_tree_2,y=x_tree_2),pch=8,col='forestgreen',size=3)+
geom_point(aes(x=y_tree_3,y=x_tree_3),pch=8,col='forestgreen',size=3)+
geom_point(aes(x=y_tree_4,y=x_tree_4),pch=8,col='forestgreen',size=3)+
ylim(low= 0, high= lim)+
xlim(low= 0, high=lim)+
ggtitle(paste(density,' plants.ha-1'))+
labs(x = 'Intra row distance (m)', y = 'Inter row distance (m)',fill= expression ('Transmitted light (%)'),col=expression ('Transmitted light (%)')) +
scale_fill_viridis(option = 'viridis',limits = c(0, 100))+
coord_equal()+
myTheme+
theme(legend.position = 'bottom')
}
if (designType %in% c('quincunx5')){
plot=grid_fin%>%
mutate(Intercepted_rel=ifelse(Intercepted_rel>100,100,Intercepted_rel))%>%
ggplot(aes(x=y, y=x,fill=Intercepted_rel))+
geom_tile()+
geom_point(aes(x=y_tree_1,y=x_tree_1),pch=8,col='forestgreen',size=3)+
geom_point(aes(x=y_tree_2,y=x_tree_2),pch=8,col='forestgreen',size=3)+
geom_point(aes(x=y_tree_3,y=x_tree_3),pch=8,col='forestgreen',size=3)+
geom_point(aes(x=y_tree_4,y=x_tree_4),pch=8,col='forestgreen',size=3)+
geom_point(aes(x=y_tree_5,y=x_tree_5),pch=8,col='forestgreen',size=3)+
ylim(low= 0, high= lim)+
xlim(low= 0, high=lim)+
ggtitle(paste(density,' plants.ha-1'))+
labs(x = 'Intra row distance (m)', y = 'Inter row distance (m)',fill= expression ('Transmitted light (%)'),col=expression ('Transmitted light (%)')) +
scale_fill_viridis(option = 'viridis',limits = c(0, 100))+
coord_equal()+
myTheme+
theme(legend.position = 'bottom')
}
}
plot
l=12
h=12
designType='square'
a1=generate_design(dist_intra = l,dist_inter = h,dist_intercrop = NULL,designType = designType,orientation = "NS",pointSize = 3)$plot
m1=Create_map(designType =designType ,d_inter =h,d_intra = l,d_intercrop = NULL,path_designs =path_designs,paramFileName =  paramFileName,orientation ="NS" )
a2=generate_design(dist_intra = l,dist_inter = h,dist_intercrop = NULL,designType = designType,orientation = "EW",pointSize = 3)$plot
m2=Create_map(designType =designType ,d_inter =h,d_intra = l,d_intercrop = NULL,path_designs =path_designs,paramFileName =  paramFileName,orientation ="EW" )
plot_grid(a1,a2,ncol=2)
plot_grid(m1$plot,m2$plot,ncol=2)
plot_grid(m1$plot2,m2$plot2,ncol=2)
l=9
h=round(sqrt(3*(l**2)/4),1)
i=2*h
designType='quincunx2'
a1=generate_design(dist_intra = l,dist_inter = h,dist_intercrop = i,designType = designType,orientation = "NS",pointSize = 3)$plot
m1=Create_map(designType =designType ,d_inter =h,d_intra = l,d_intercrop = i,path_designs =path_designs,paramFileName =  paramFileName,orientation ="NS" )
a2=generate_design(dist_intra = l,dist_inter = h,dist_intercrop = i,designType = designType,orientation = "EW",pointSize = 3)$plot
m2=Create_map(designType =designType ,d_inter =h,d_intra = l,d_intercrop = i,path_designs =path_designs,paramFileName =  paramFileName,orientation ="EW" )
plot_grid(a1,a2,ncol=2)
plot_grid(m1$plot,m2$plot,ncol=2)
plot_grid(m1$plot2,m2$plot2,ncol=2)
l=9
h=round(sqrt(3*(l**2)/4),1)
i=2*h
designType='quincunx3'
d_inter =h
d_intra = l
d_intercrop = i
if (designType %in% c('square','quincunx')){
design_name=paste0(designType,'_inter',d_inter,'_intra',d_intra)
}
if (!(designType %in% c('square','quincunx'))){
design_name=paste0(designType,'_inter',d_inter,'_intra',d_intra,'_intercrop',d_intercrop)
}
### checking for existing map
existing_files=list.files(path ='2-outputs/Mapping_Light',pattern = '.csv',full.names = T)
fileMap=paste0('2-outputs/Mapping_Light/',paramFileName,'_',design_name,'_',orientation,'.csv')
!(fileMap %in% existing_files)
fileMap
print(paste("generating the file:",fileMap))
sim_folder=paste0('2-outputs/Run_simu/output/',design_name,'_',paramFileName,'_',orientation,'/')
files_sim=
sim_folder%>%
list.files(recursive = T, full.names = TRUE)
###meteo
path_meteo= files_sim[grep("meteo.csv",files_sim)]
# Importing the meteorology file from the first simulation (all are the same):
meteo= archimedR::import_meteo(x = file.path(path_meteo[1]))%>%
mutate(date= as.POSIXct(date)+ seconds(hour_start))
###conversion factor W.m-2.60mn of GR-->MJ.m-2.day-1 of PAR
conMJday=0.48*3600*10**-6
##"incident PAR in MJ.m-2.day-1
PARinc=as.numeric(meteo%>%
summarize(PARinc=sum(`RI_TIR_f`*conMJday)))
###import summary outputs
path_sum= files_sim[grep("summary.csv",files_sim)]
# Importing the meteorology file from the first simulation (all are the same):
summ=data.table::fread(file =  (path_sum[1]))
stepDuration=unique(summ$`step_duration`)
# Importing the node values (main output):
path_nodes= files_sim[grep("component_values.csv",files_sim)]
nodes=
lapply(path_nodes, function(x){
name=
x%>%dirname()%>%strsplit(split = "/")%>%unlist()%>%
tail(1)
data.table::fread(x)%>%mutate(Design= name)
})%>%data.table::rbindlist()%>%tibble::as_tibble()
ngridT=
nodes%>%
ungroup()%>%
filter(type=="Cobblestone")%>%
filter(step_number==step_number[1])%>%
group_by(Design)%>%
summarise(ngrid= n(), area_grid= sum(.data$area))%>%
ungroup()%>%
mutate(Design=design_name)%>%
data.frame()
# Grid index:
grid_dim= data.table::fread(paste0(path_designs,design_name,'.csv'))%>%
mutate(Design=design_name,
ngrid=ngridT$ngrid,
area_grid=ngridT$area_grid,
surf_grid= area_grid/ngrid,
x_length= xmax-xmin,
y_length= ymax-ymin,
grid_n_x= round(x_length/sqrt(surf_grid)),
grid_n_y= round(y_length/sqrt(surf_grid))
)%>%
select(Design,  xmin ,xmax,ymin,ymax,ngrid,area_grid,Design,surf_grid,x_length,y_length ,grid_n_x,grid_n_y)%>%
distinct()
grid_index= expand.grid(y= (1:grid_dim$grid_n_y)*sqrt(grid_dim$surf_grid),
x= (1:grid_dim$grid_n_x)*sqrt(grid_dim$surf_grid))%>%
mutate(id= 1:nrow(.))%>%
mutate(Design=grid_dim$Design)
des_=  data.table::fread(paste0(path_designs,design_name,'.csv'))%>%select(x,y)%>%unlist(.)
trees_positions= des_%>%matrix(nrow = 1)%>%as.data.frame()%>%setNames(names(des_))%>%
mutate(Design= design_name)
x=trees_positions$Design
found= grep(x,grid_dim$Design)
if(found==1 & !('x1' %in% colnames(trees_positions))){
trees_positions=trees_positions%>%
rename(x1=x,y1=y)
}
if(found>1){
trees_positions= trees_positions[trees_positions$Design==x,]%>%
.[rep(1,length(found)),]%>%
mutate(Design= grid_dim$Design[grep(x,grid_dim$Design)])
}
## get 5 trees positions to be generic
nbT=(length(trees_positions)-1)/2
trees_positions=trees_positions%>%
mutate(x2=ifelse(nbT>1,x2,NA),
x3=ifelse(nbT>2,x3,NA),
x4=ifelse(nbT>3,x4,NA),
x5=ifelse(nbT>4,x5,NA),
y2=ifelse(nbT>1,y2,NA),
y3=ifelse(nbT>2,y3,NA),
y4=ifelse(nbT>3,y4,NA),
y5=ifelse(nbT>4,y5,NA))
grid_dist=
merge(grid_index,trees_positions,by = "Design",all.x=F)%>%
mutate(dist_tree_1= sqrt((x - x1)^2 + (y - y1)^2),
dist_tree_2= sqrt((x - x2)^2 + (y - y2)^2),
dist_tree_3= sqrt((x - x3)^2 + (y - y3)^2),
dist_tree_4= sqrt((x - x4)^2 + (y - y4)^2),
dist_tree_5= sqrt((x - x5)^2 + (y - y5)^2),
dist_tree_x1= abs(x - x1),
dist_tree_x2= abs(x - x2),
dist_tree_x3= abs(x - x3),
dist_tree_x4= abs(x - x4),
dist_tree_x5= abs(x - x5),
x_tree_1= x1, x_tree_2= x2,
x_tree_3= x3, x_tree_4= x4,
x_tree_5= x5,
y_tree_1=y1,y_tree_2=y2,
y_tree_3=y3,y_tree_4=y4,y_tree_5=y5)%>%
mutate(dist_tree= pmin(dist_tree_1,dist_tree_2,dist_tree_3,dist_tree_4,dist_tree_5,na.rm = T),
dist_tree_x= pmin(dist_tree_x1,dist_tree_x2,dist_tree_x3,dist_tree_x4,dist_tree_5,na.rm = T))
plane_df=
nodes%>%
filter(type=="Cobblestone")%>%
mutate(Design=design_name)%>%
mutate(component_id= component_id-1)%>% # id 1 was the scene
# dplyr::left_join(Area_plots, by= "Design")%>%
dplyr::left_join(meteo%>%select(date,step), by= c("step_number"= "step"))%>%
dplyr::left_join(grid_dist, by= c("Design","component_id"= "id"))
plane_df$Design= as.factor(plane_df$Design)
plane_df=plane_df%>%
filter(Design==unique(grid_dist$Design))
plane_df_step=
plane_df%>%
dplyr::mutate(Date= date,
irradiation= Ra_PAR_q*area*step_duration,
irradiance= Ra_PAR_q)
grid_df_day=
plane_df_step%>%
filter(Design %in% unique(plane_df_step$Design))%>%
group_by(Design,component_id)%>%
summarise(Date= mean(.data$date),
Intercepted= sum(Ra_PAR_q/area*10**-6),
# absEnergy_withScattering_PAR J grid-1
# Global intercepted radiation in J grid-1 d-1
# Area_plot= mean(.data$Area_plot),
dist_tree= mean(dist_tree),
dist_tree_x= mean(dist_tree_x),
# density= unique(density),
x= unique(x),
y=unique(y),
x_tree_1= unique(x_tree_1),
x_tree_2= unique(x_tree_2),
x_tree_3= unique(x_tree_3),
x_tree_4= unique(x_tree_4),
x_tree_5= unique(x_tree_5),
y_tree_1= unique(y_tree_1),
y_tree_2= unique(y_tree_2),
y_tree_3= unique(y_tree_3),
y_tree_4= unique(y_tree_4),
y_tree_5= unique(y_tree_5))%>%
ungroup()
reps=NULL
if (designType %in% c('square','quincunx')){
d_intercrop=0}
repRows=ceiling(lim/(d_inter+d_intercrop))
repCol=ceiling(lim/d_intra)
for (r_x in 0:repRows){
for (r_y in 0:repCol){
# print(paste('r_x:',r_x,' r_y:',r_y))
subRep=grid_df_day%>%
group_by(Design)%>%
mutate(xmax=max(x,na.rm=T),
ymax=max(y,na.rm=T),
x=x+r_x*xmax,
y=y+r_y*ymax,
x_tree_1=x_tree_1+r_x*xmax,
x_tree_2=x_tree_2+r_x*xmax,
x_tree_3=x_tree_3+r_x*xmax,
x_tree_4=x_tree_4+r_x*xmax,
x_tree_5=x_tree_5+r_x*xmax,
y_tree_1=y_tree_1+r_y*ymax,
y_tree_2=y_tree_2+r_y*ymax,
y_tree_3=y_tree_3+r_y*ymax,
y_tree_4=y_tree_4+r_y*ymax,
y_tree_5=y_tree_5+r_y*ymax
)%>%
ungroup()%>%
select(colnames(grid_df_day))
reps=rbind(reps,subRep)
}
}
if (designType %in% c('quincunx','square','quincunx2','square2')){
grid_fin=reps%>%
filter(x<=lim & y<=lim)%>%
# filter(x_tree_1<=lim & y_tree_1<=lim)%>%
# filter(x_tree_2<=lim & y_tree_2<=lim)%>%
mutate(Intercepted_rel=Intercepted/PARinc*100)
}
if (designType %in% c('quincunx3')){
grid_fin=reps%>%
filter(x<=lim & y<=lim)%>%
filter(x_tree_1<=lim & y_tree_1<=lim)%>%
filter(x_tree_2<=lim & y_tree_2<=lim)%>%
filter(x_tree_3<=lim & y_tree_3<=lim)%>%
mutate(Intercepted_rel=Intercepted/PARinc*100)
}
designType
designType
orientation
plot=grid_fin%>%
mutate(Intercepted_rel=ifelse(Intercepted_rel>100,100,Intercepted_rel))%>%
ggplot(aes(x=y, y=x,fill=Intercepted_rel))+
geom_tile()+
geom_point(aes(x=y_tree_1,y=x_tree_1),pch=8,col='forestgreen',size=3)+
geom_point(aes(x=y_tree_2,y=x_tree_2),pch=8,col='forestgreen',size=3)+
geom_point(aes(x=y_tree_3,y=x_tree_3),pch=8,col='forestgreen',size=3)+
ylim(low= 0, high= lim)+
xlim(low= 0, high=lim)+
ggtitle(paste(density,' plants.ha-1'))+
labs(x = 'Intra row distance (m)', y = 'Inter row distance (m)',fill= expression ('Transmitted light (%)'),col=expression ('Transmitted light (%)')) +
scale_fill_viridis(option = 'viridis',limits = c(0, 100))+
coord_equal()+
myTheme+
theme(legend.position = 'bottom')
plot
if (designType %in% c('quincunx3')){
grid_fin=reps%>%
filter(x<=lim & y<=lim)%>%
# filter(x_tree_1<=lim & y_tree_1<=lim)%>%
# filter(x_tree_2<=lim & y_tree_2<=lim)%>%
# filter(x_tree_3<=lim & y_tree_3<=lim)%>%
mutate(Intercepted_rel=Intercepted/PARinc*100)
}
plot=grid_fin%>%
mutate(Intercepted_rel=ifelse(Intercepted_rel>100,100,Intercepted_rel))%>%
ggplot(aes(x=x, y=y,fill=Intercepted_rel))+
geom_tile()+
geom_point(aes(x=x_tree_1,y=y_tree_1),pch=8,col='forestgreen',size=3)+
geom_point(aes(x=x_tree_2,y=y_tree_2),pch=8,col='forestgreen',size=3)+
geom_point(aes(x=x_tree_3,y=y_tree_3),pch=8,col='forestgreen',size=3)+
ylim(low= 0, high= lim)+
xlim(low= 0, high=lim)+
ggtitle(paste(density,' plants.ha-1'))+
labs(y = 'Intra row distance (m)', x = 'Inter row distance (m)',fill= expression ('Transmitted light (%)'),col=expression ('Transmitted light (%)')) +
scale_fill_viridis(option = 'viridis',limits = c(0, 100))+
coord_equal()+
myTheme+
theme(legend.position = 'bottom')
plot
l=9
h=round(sqrt(3*(l**2)/4),1)
i=2*h
designType='quincunx3'
a1=generate_design(dist_intra = l,dist_inter = h,dist_intercrop = i,designType = designType,orientation = "NS",pointSize = 3)$plot
m1=Create_map(designType =designType ,d_inter =h,d_intra = l,d_intercrop = i,path_designs =path_designs,paramFileName =  paramFileName,orientation ="NS" )
a2=generate_design(dist_intra = l,dist_inter = h,dist_intercrop = i,designType = designType,orientation = "EW",pointSize = 3)$plot
m2=Create_map(designType =designType ,d_inter =h,d_intra = l,d_intercrop = i,path_designs =path_designs,paramFileName =  paramFileName,orientation ="EW" )
plot_grid(a1,a2,ncol=2)
plot_grid(m1$plot,m2$plot,ncol=2)
plot_grid(m1$plot2,m2$plot2,ncol=2)
source('./1-code/helpers.R')
source('./1-code/Generate_designs.R')
source('1-code/Mapping_light.R')
path_designs='2-outputs/Run_simu/planting_designs/'
MAP=90
paramFileName=paste0('DA1_Average_MAP_',MAP)
l=9
h=round(sqrt(3*(l**2)/4),1)
i=2*h
designType='quincunx3'
a1=generate_design(dist_intra = l,dist_inter = h,dist_intercrop = i,designType = designType,orientation = "NS",pointSize = 3)$plot
m1=Create_map(designType =designType ,d_inter =h,d_intra = l,d_intercrop = i,path_designs =path_designs,paramFileName =  paramFileName,orientation ="NS" )
a2=generate_design(dist_intra = l,dist_inter = h,dist_intercrop = i,designType = designType,orientation = "EW",pointSize = 3)$plot
m2=Create_map(designType =designType ,d_inter =h,d_intra = l,d_intercrop = i,path_designs =path_designs,paramFileName =  paramFileName,orientation ="EW" )
plot_grid(a1,a2,ncol=2)
plot_grid(m1$plot,m2$plot,ncol=2)
plot_grid(m1$plot2,m2$plot2,ncol=2)
# Load packages -----------------------------------------------------------
# install.packages("devtools")
# devtools::install_github("VEZY/Vpalmr")
packs <- c("lubridate", "stringr", 'tidyverse','viridis','Vpalmr','data.table','yaml')
InstIfNec<-function (pack) {
if (!do.call(require,as.list(pack))) {
do.call(install.packages,as.list(pack))  }
do.call(require,as.list(pack)) }
lapply(packs, InstIfNec)
source('./1-code/helpers.R')
source('./1-code/Generate_designs.R')
source('./1-code/Mapping_light.R')
MAP=90
# designType='quincunx'
path_designs='./2-outputs/Run_simu/planting_designs/'
pathVpalmParam='./2-outputs/Generate_VPalm_param/'
pathArchimed='./1-code/archimed-phys.jar'
pathVpalmJar='./1-code/vpalm_biomech.jar'
pathOpf='./2-outputs/Run_simu/ops/opf/'
pathOPS='./2-outputs/Run_simu/ops/'
opfStepExport=6
replanting=T
paramFileName=paste0('DA1_Average_MAP_',MAP)
packs <- c("lubridate", "stringr", 'tidyverse','viridis','Vpalmr','data.table','yaml')
InstIfNec<-function (pack) {
if (!do.call(require,as.list(pack))) {
do.call(install.packages,as.list(pack))  }
do.call(require,as.list(pack)) }
lapply(packs, InstIfNec)
source('./1-code/helpers.R')
source('./1-code/Generate_designs.R')
source('./1-code/Mapping_light.R')
# inputs ------------------------------------------------------------------
MAP=90
# designType='quincunx'
path_designs='./2-outputs/Run_simu/planting_designs/'
pathVpalmParam='./2-outputs/Generate_VPalm_param/'
pathArchimed='./1-code/archimed-phys.jar'
pathVpalmJar='./1-code/vpalm_biomech.jar'
pathOpf='./2-outputs/Run_simu/ops/opf/'
pathOPS='./2-outputs/Run_simu/ops/'
opfStepExport=6
replanting=T
paramFileName=paste0('DA1_Average_MAP_',MAP)
designType='square'
dist_intercrop=NULL
for (orientation in c('NS','EW')){
lh=list(c(8,9),c(9,9),c(11,9),c(12,12))
for (i in lh){
dist_intra=i[2]
dist_inter=i[1]
RunSimu(d_inter=dist_inter,d_intra=dist_intra,d_intercrop =dist_intercrop,designType =designType,  MAP=MAP,pathVpalmParam=pathVpalmParam,pathArchimed=pathArchimed,path_designs=path_designs,pathVpalmJar=pathVpalmJar,pathOpf=pathOpf,pathOPS=pathOPS,run_photosynthesis=T,opfStepExport=opfStepExport,overwrite =F,orientation=orientation)
}
}
# Load packages -----------------------------------------------------------
packs <- c("knitr","lubridate", "stringr", 'tidyverse','viridis','Vpalmr','data.table','yaml','png','cowplot')
InstIfNec<-function (pack) {
if (!do.call(require,as.list(pack))) {
do.call(install.packages,as.list(pack))  }
do.call(require,as.list(pack)) }
lapply(packs, InstIfNec)
knitr::opts_chunk$set(echo = TRUE)
source('./1-code/helpers.R')
source('./1-code/Generate_designs.R')
source('1-code/Mapping_light.R')
path_designs='2-outputs/Run_simu/planting_designs/'
MAP=90
paramFileName=paste0('DA1_Average_MAP_',MAP)
l=9
h=8
designType='square'
a1=generate_design(dist_intra = l,dist_inter = h,dist_intercrop = NULL,designType = designType,orientation = "NS",pointSize = 3)$plot
m1=Create_map(designType =designType ,d_inter =h,d_intra = l,d_intercrop = NULL,path_designs =path_designs,paramFileName =  paramFileName,orientation ="NS" )
a2=generate_design(dist_intra = l,dist_inter = h,dist_intercrop = NULL,designType = designType,orientation = "EW",pointSize = 3)$plot
m2=Create_map(designType =designType ,d_inter =h,d_intra = l,d_intercrop = NULL,path_designs =path_designs,paramFileName =  paramFileName,orientation ="EW" )
plot_grid(a1,a2,ncol=2)
plot_grid(m1$plot,m2$plot,ncol=2)
plot_grid(m1$plot2,m2$plot2,ncol=2)
l=9
h=9
designType='square'
a1=generate_design(dist_intra = l,dist_inter = h,dist_intercrop = NULL,designType = designType,orientation = "NS",pointSize = 3)$plot
m1=Create_map(designType =designType ,d_inter =h,d_intra = l,d_intercrop = NULL,path_designs =path_designs,paramFileName =  paramFileName,orientation ="NS" )
a2=generate_design(dist_intra = l,dist_inter = h,dist_intercrop = NULL,designType = designType,orientation = "EW",pointSize = 3)$plot
m2=Create_map(designType =designType ,d_inter =h,d_intra = l,d_intercrop = NULL,path_designs =path_designs,paramFileName =  paramFileName,orientation ="EW" )
plot_grid(a1,a2,ncol=2)
plot_grid(m1$plot,m2$plot,ncol=2)
plot_grid(m1$plot2,m2$plot2,ncol=2)
l=9
h=11
designType='square'
a1=generate_design(dist_intra = l,dist_inter = h,dist_intercrop = NULL,designType = designType,orientation = "NS",pointSize = 3)$plot
m1=Create_map(designType =designType ,d_inter =h,d_intra = l,d_intercrop = NULL,path_designs =path_designs,paramFileName =  paramFileName,orientation ="NS" )
a2=generate_design(dist_intra = l,dist_inter = h,dist_intercrop = NULL,designType = designType,orientation = "EW",pointSize = 3)$plot
m2=Create_map(designType =designType ,d_inter =h,d_intra = l,d_intercrop = NULL,path_designs =path_designs,paramFileName =  paramFileName,orientation ="EW" )
plot_grid(a1,a2,ncol=2)
plot_grid(m1$plot,m2$plot,ncol=2)
plot_grid(m1$plot2,m2$plot2,ncol=2)
###############
# Script to generate a average meteo day  ----------------------------
#source. https://open-meteo.com/en/docs/#latitude=17.1814&longitude=-93.2744&hourly=temperature_2m,relative_humidity_2m,direct_normal_irradiance,direct_radiation_instant,diffuse_radiation_instant,direct_normal_irradiance_instant,terrestrial_radiation_instant&daily=sunrise,sunset,daylight_duration&timezone=auto&start_date=2020-01-01&end_date=2024-01-01&time_mode=time_interval
################
# R.PEREZ February 2024
# Load packages -----------------------------------------------------------
packs <- c("lubridate", "stringr", 'tidyverse','viridis','data.table')
InstIfNec<-function (pack) {
if (!do.call(require,as.list(pack))) {
do.call(install.packages,as.list(pack))  }
do.call(require,as.list(pack)) }
lapply(packs, InstIfNec)
# load data ---------------------------------------------------------------
met_raw=data.table::fread(input = '0-data/open-meteo-17.00N93.38W622m.csv',skip = 3)%>%
na.omit()
View(met_raw)
