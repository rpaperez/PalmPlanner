min=min(c(lims,3*max(d_inter,d_intra)))
grid_fin=reps%>%
filter(x<=min & y<=min)%>%
filter(x_tree_1<=min & y_tree_1<=min)%>%
filter(x_tree_2<=min & y_tree_2<=min)%>%
mutate(Intercepted_rel=Intercepted/PARinc*100)
### save the map
data.table::fwrite(x = grid_fin,file =fileMap)
### graphic
grid= data.table::fread(paste0(path_designs,design_name,'.csv'))
density=round(nrow(grid)*10000/(unique(grid$xmax)*unique(grid$ymax)))
plot=grid_fin%>%
mutate(Intercepted_rel=ifelse(Intercepted_rel>100,100,Intercepted_rel))%>%
ggplot(aes(x=x, y=y,fill=Intercepted_rel,col=Intercepted_rel))+
geom_point(pch=22)+
geom_point(aes(x=x_tree_1,y=y_tree_1),pch=8,col='green',size=2)+
geom_point(aes(x=x_tree_2,y=y_tree_2),pch=8,col='green',size=2)+
# geom_point(aes(x=x_tree_3,y=y_tree_3),pch=8,col=2,size=2)+
# geom_point(aes(x=x_tree_4,y=y_tree_4),pch=8,col=2,size=2)+
# coord_fixed()+
ylim(low= 0, high= min(c(max(grid_fin$y),max(grid_fin$x))))+
xlim(low= 0, high=min(c(max(grid_fin$y),max(grid_fin$x))))+
# labs(x = 'x (m)', y = 'y (m)',fill= expression (MJ*' '*m**-2*' '*day**-1 ),col=expression (MJ*' '*m**-2*' '*day**-1 )) +
labs(x = 'x (m)', y = 'y (m)',fill= expression ('Transmitted light (%)'),col=expression ('Transmitted light (%)')) +
scale_fill_viridis(option = 'plasma',limits = c(0, 100))+
scale_color_viridis(option = 'plasma',limits = c(0, 100))+
ggtitle(paste(design_name,' -',orientation),
paste(paramFileName,' density:',density,'palms ha-1'))
plot
plot=grid_fin%>%
mutate(Intercepted_rel=ifelse(Intercepted_rel>100,100,Intercepted_rel))%>%
ggplot(aes(x=x, y=y,fill=Intercepted_rel,col=Intercepted_rel))+
geom_point(pch=22)+
geom_point(aes(x=x_tree_1,y=y_tree_1),pch=8,col='green',size=2)+
geom_point(aes(x=x_tree_2,y=y_tree_2),pch=8,col='green',size=2)+
# geom_point(aes(x=x_tree_3,y=y_tree_3),pch=8,col=2,size=2)+
# geom_point(aes(x=x_tree_4,y=y_tree_4),pch=8,col=2,size=2)+
# coord_fixed()+
ylim(low= 0, high= min(c(max(grid_fin$y),max(grid_fin$x))))+
xlim(low= 0, high=min(c(max(grid_fin$y),max(grid_fin$x))))+
# labs(x = 'x (m)', y = 'y (m)',fill= expression (MJ*' '*m**-2*' '*day**-1 ),col=expression (MJ*' '*m**-2*' '*day**-1 )) +
labs(x = 'x (m)', y = 'y (m)',fill= expression ('Transmitted light (%)'),col=expression ('Transmitted light (%)')) +
scale_fill_viridis(option = 'plasma',limits = c(0, 100))+
scale_color_viridis(option = 'plasma',limits = c(0, 100))+
ggtitle(paste(design_name,' -',orientation),
paste(paramFileName,' density:',density,'palms ha-1'))+
coord_equal()
plot
plot=grid_fin%>%
mutate(Intercepted_rel=ifelse(Intercepted_rel>100,100,Intercepted_rel))%>%
ggplot(aes(x=x, y=y,fill=Intercepted_rel,col=Intercepted_rel))+
geom_point(pch=22)+
geom_point(aes(x=x_tree_1,y=y_tree_1),pch=8,col='forestgreen',size=2)+
geom_point(aes(x=x_tree_2,y=y_tree_2),pch=8,col='green',size=2)+
# geom_point(aes(x=x_tree_3,y=y_tree_3),pch=8,col=2,size=2)+
# geom_point(aes(x=x_tree_4,y=y_tree_4),pch=8,col=2,size=2)+
# coord_fixed()+
ylim(low= 0, high= min(c(max(grid_fin$y),max(grid_fin$x))))+
xlim(low= 0, high=min(c(max(grid_fin$y),max(grid_fin$x))))+
# labs(x = 'x (m)', y = 'y (m)',fill= expression (MJ*' '*m**-2*' '*day**-1 ),col=expression (MJ*' '*m**-2*' '*day**-1 )) +
labs(x = 'x (m)', y = 'y (m)',fill= expression ('Transmitted light (%)'),col=expression ('Transmitted light (%)')) +
scale_fill_viridis(option = 'plasma',limits = c(0, 100))+
scale_color_viridis(option = 'plasma',limits = c(0, 100))+
ggtitle(paste(design_name,' -',orientation),
paste(paramFileName,' density:',density,'palms ha-1'))+
coord_equal()
plot
plot=grid_fin%>%
mutate(Intercepted_rel=ifelse(Intercepted_rel>100,100,Intercepted_rel))%>%
ggplot(aes(x=x, y=y,fill=Intercepted_rel,col=Intercepted_rel))+
geom_point(pch=22)+
geom_point(aes(x=x_tree_1,y=y_tree_1),pch=8,col='forestgreen',size=3)+
geom_point(aes(x=x_tree_2,y=y_tree_2),pch=8,col='forestgreen',size=3)+
# geom_point(aes(x=x_tree_3,y=y_tree_3),pch=8,col=2,size=2)+
# geom_point(aes(x=x_tree_4,y=y_tree_4),pch=8,col=2,size=2)+
# coord_fixed()+
ylim(low= 0, high= min(c(max(grid_fin$y),max(grid_fin$x))))+
xlim(low= 0, high=min(c(max(grid_fin$y),max(grid_fin$x))))+
# labs(x = 'x (m)', y = 'y (m)',fill= expression (MJ*' '*m**-2*' '*day**-1 ),col=expression (MJ*' '*m**-2*' '*day**-1 )) +
labs(x = 'x (m)', y = 'y (m)',fill= expression ('Transmitted light (%)'),col=expression ('Transmitted light (%)')) +
scale_fill_viridis(option = 'plasma',limits = c(0, 100))+
scale_color_viridis(option = 'plasma',limits = c(0, 100))+
ggtitle(paste(design_name,' -',orientation),
paste(paramFileName,' density:',density,'palms ha-1'))+
coord_equal()+
myTheme
plot
### graphic
grid= data.table::fread(paste0(path_designs,design_name,'.csv'))
density=round(nrow(grid)*10000/(unique(grid$xmax)*unique(grid$ymax)))
density
nrow(grid)
round(nrow(grid)*10000/(unique(grid$xmax)*unique(grid$ymax)))
design_name
plot=grid_fin%>%
mutate(Intercepted_rel=ifelse(Intercepted_rel>100,100,Intercepted_rel))%>%
ggplot(aes(x=y, y=x,fill=Intercepted_rel,col=Intercepted_rel))+
geom_point(pch=22)+
geom_point(aes(x=y_tree_1,y=x_tree_1),pch=8,col='forestgreen',size=3)+
geom_point(aes(x=y_tree_2,y=x_tree_2),pch=8,col='forestgreen',size=3)+
# geom_point(aes(x=x_tree_3,y=y_tree_3),pch=8,col=2,size=2)+
# geom_point(aes(x=x_tree_4,y=y_tree_4),pch=8,col=2,size=2)+
# coord_fixed()+
ylim(low= 0, high= min(c(max(grid_fin$y),max(grid_fin$x))))+
xlim(low= 0, high=min(c(max(grid_fin$y),max(grid_fin$x))))+
# labs(x = 'x (m)', y = 'y (m)',fill= expression (MJ*' '*m**-2*' '*day**-1 ),col=expression (MJ*' '*m**-2*' '*day**-1 )) +
labs(x = 'Intra row distance (m)', y = 'Inter row distance (m)',fill= expression ('Transmitted light (%)'),col=expression ('Transmitted light (%)')) +
scale_fill_viridis(option = 'plasma',limits = c(0, 100))+
scale_color_viridis(option = 'plasma',limits = c(0, 100))+
ggtitle(paste(design_name,' -',orientation),
paste(paramFileName,' density:',density,'palms ha-1'))+
coord_equal()+
myTheme
plot
im=readPNG("north.png")
visu=ggdraw() +
draw_plot(plot) +
draw_image(im,x = 0.4,y = 0.4,scale=0.1)
visu
source('./1-code/Mapping_light.R')
Create_map(d_inter =d_inter ,d_intra = d_intra,designType = designType,d_intercrop =d_intercrop, path_designs = path_designs,paramFileName=paramFileName,orientation = orientation)
Create_map(d_inter =d_inter ,d_intra = d_intra,designType = designType,d_intercrop =d_intercrop, path_designs = path_designs,paramFileName=paramFileName,orientation = orientation)
d_inter
d_intra
2/(19*19)
2/(16*16)
2/(9.18*9.18)
2/(15.96*9.18)
2/(15.96*9.18)*10000
2/(15.96*5)*10000
MAP=180
d_inter=7.8
d_intra=9
d_intercrop=NULL
designType='quincunx'
path_designs='./2-outputs/Run_simu/planting_designs/'
pathVpalmParam='./2-outputs/Generate_VPalm_param/'
pathArchimed='./1-code/archimed-phys.jar'
pathVpalmJar='./1-code/vpalm_biomech.jar'
pathOpf='./2-outputs/Run_simu/ops/opf/'
pathOPS='./2-outputs/Run_simu/ops/'
opfStepExport=14
orientation='NS'
RunSimu(d_inter=d_inter,d_intra=d_intra,d_intercrop =d_intercrop,designType =designType,  MAP=MAP,pathVpalmParam=pathVpalmParam,pathArchimed=pathArchimed,path_designs=path_designs,pathVpalmJar=pathVpalmJar,pathOpf=pathOpf,pathOPS=pathOPS,run_photosynthesis=T,opfStepExport=opfStepExport,overwrite =T,orientation=orientation)
paramFileName=paste0('Mockup_seed1_MAP_',MAP)
paramFileName
designType
if (designType %in% c('square','quincunx')){
design_name=paste0(designType,'_inter',d_inter,'_intra',d_intra)
}
if (!(designType %in% c('square','quincunx'))){
design_name=paste0(designType,'_inter',d_inter,'_intra',d_intra,'_intercrop',d_intercrop)
}
folders=list.dirs(path ='./2-outputs/Run_simu/output',full.names = T)
foldSim=paste0('./2-outputs/Run_simu/output/',paramFileName,'_',design_name,'_',orientation)
if (foldSim %in% folders & overwrite==F){
print(paste(foldSim,'already exists, if you want to overwrite change overwrite argument in the RunSimu function'))
}
if (!(foldSim %in% folders)){
print(paste("Running simulation:",foldSim))
# generate Vpalm Parameters -----------------------------------------------
if(!paste0(paramFileName,'.txt') %in% list.files(path = pathVpalmParam,pattern = 'txt')){
print(paste0('writting VPalm parameter file: ',pathVpalmParam,paramFileName,'.txt'))
Generate_Vpalm_param(MAP_requested =MAP)
}
# generate opf ------------------------------------------------------------
if(!paste0(paramFileName,'.opf') %in% list.files(path = pathOpf,pattern = 'opf')){
print(paste0('creating opf: ',pathOpf,paramFileName,'.opf'))
system(command = paste0('java -jar ',pathVpalmJar,' ',pathVpalmParam,paramFileName,'.txt',' ',pathOpf,paramFileName,'.opf'))
}
# generate ops ------------------------------------------------------------
print('writting ops')
create.ops(opfname =paramFileName ,dist_inter = d_inter,dist_intra = d_intra,designType = designType,dist_intercrop =d_intercrop,orientation =orientation,  writeOPS = T,pathOPS = pathOPS)
## save planting design
print('saving planting design')
p_design=generate_design(dist_inter =dist_inter, dist_intra=dist_intra,dist_intercrop =d_intercrop,designType = designType ,orientation = orientation,pointSize = 3)$result
data.table::fwrite(x=p_design,file = paste0(path_designs,design_name,'.csv'))
# generate config file ----------------------------------------------------
##"load template
configYml=read_yaml(file =  '0-data/Archimed_inputs/config_template.yml')
## change names & dirs
opsName=paste0(design_name,'_',paramFileName,'.ops')
configYml$scene=paste0('ops/',opsName)
configYml$simulation_directory=paste0(str_remove(string = opsName,pattern = '.ops'),'_',orientation)
configYml$export_ops=as.character(round(opfStepExport))
if (!(orientation %in% c('NS','EW'))){
print('orientation must be NS or EW')
}
if (orientation=='EW'){
configYml$scene_rotation=90
}
if (run_photosynthesis==T){
# Absorbed light
configYml$component_variables$Ra_PAR_0_f=T
configYml$component_variables$Ra_NIR_0_f=T
configYml$component_variables$Ra_PAR_0_q=T
configYml$component_variables$Ra_NIR_0_q=T
configYml$component_variables$Ra_PAR_f=T
configYml$component_variables$Ra_NIR_f=T
configYml$component_variables$Ra_TIR_f=T
configYml$component_variables$Ra_PAR_q=T
configYml$component_variables$Ra_NIR_q=T
configYml$component_variables$Ra_TIR_q=T
# Assimilation
configYml$component_variables$An_f=T
configYml$component_variables$An_q=T
configYml$component_variables$Gs=T
# Energy
configYml$component_variables$H_q=T
configYml$component_variables$H_f=T
configYml$component_variables$LE_q=T
configYml$component_variables$LE_f=T
configYml$component_variables$Tr_f=T
configYml$component_variables$Tr_q=T
configYml$component_variables$T=T
}
pathConfig=paste0('2-outputs/Run_simu/',str_replace(string = opsName,pattern = '.ops',replacement = paste0('_',orientation,'.yml')))
yaml::write_yaml(x =  configYml,file =pathConfig)
debut=Sys.time()
system(command =paste0('java -jar ',pathArchimed,' ',pathConfig))
print(paste("compute time :",difftime(time1 = Sys.time(),time2 = debut,units = "mins"),'mins'))
}
d_intercrop
des=generate_design(dist_inter =dist_inter, dist_intra=dist_intra,dist_intercrop =dist_intercrop,designType = designType,orientation = orientation,pointSize = 3)$result
dist_intercrop=d_intercrop
d_intercrop
des=generate_design(dist_inter =dist_inter, dist_intra=dist_intra,dist_intercrop =dist_intercrop,designType = designType,orientation = orientation,pointSize = 3)$result
des
dist_inter
# Load packages -----------------------------------------------------------
# install.packages("devtools")
# devtools::install_github("VEZY/Vpalmr")
packs <- c("lubridate", "stringr", 'tidyverse','viridis','Vpalmr','data.table','yaml')
InstIfNec<-function (pack) {
if (!do.call(require,as.list(pack))) {
do.call(install.packages,as.list(pack))  }
do.call(require,as.list(pack)) }
lapply(packs, InstIfNec)
source('./1-code/helpers.R')
source('./1-code/Mapping_light.R')
# inputs ------------------------------------------------------------------
MAP=180
d_inter=7.8
d_intra=9
d_intercrop=NULL
designType='quincunx'
path_designs='./2-outputs/Run_simu/planting_designs/'
pathVpalmParam='./2-outputs/Generate_VPalm_param/'
pathArchimed='./1-code/archimed-phys.jar'
pathVpalmJar='./1-code/vpalm_biomech.jar'
pathOpf='./2-outputs/Run_simu/ops/opf/'
pathOPS='./2-outputs/Run_simu/ops/'
opfStepExport=14
orientation='NS'
RunSimu(d_inter=d_inter,d_intra=d_intra,d_intercrop =d_intercrop,designType =designType,  MAP=MAP,pathVpalmParam=pathVpalmParam,pathArchimed=pathArchimed,path_designs=path_designs,pathVpalmJar=pathVpalmJar,pathOpf=pathOpf,pathOPS=pathOPS,run_photosynthesis=T,opfStepExport=opfStepExport,overwrite =T,orientation=orientation)
create.ops(opfname =paramFileName ,dist_inter = d_inter,dist_intra = d_intra,designType = designType,dist_intercrop =d_intercrop,orientation =orientation,  writeOPS = T,pathOPS = pathOPS)
paramFileName=paste0('Mockup_seed1_MAP_',MAP)
if (designType %in% c('square','quincunx')){
design_name=paste0(designType,'_inter',d_inter,'_intra',d_intra)
}
if (!(designType %in% c('square','quincunx'))){
design_name=paste0(designType,'_inter',d_inter,'_intra',d_intra,'_intercrop',d_intercrop)
}
folders=list.dirs(path ='./2-outputs/Run_simu/output',full.names = T)
foldSim=paste0('./2-outputs/Run_simu/output/',paramFileName,'_',design_name,'_',orientation)
if (foldSim %in% folders & overwrite==F){
print(paste(foldSim,'already exists, if you want to overwrite change overwrite argument in the RunSimu function'))
}
overwrite=T
# generate ops ------------------------------------------------------------
print('writting ops')
create.ops(opfname =paramFileName ,dist_inter = d_inter,dist_intra = d_intra,designType = designType,dist_intercrop =d_intercrop,orientation =orientation,  writeOPS = T,pathOPS = pathOPS)
## save planting design
print('saving planting design')
p_design=generate_design(dist_inter =dist_inter, dist_intra=dist_intra,dist_intercrop =d_intercrop,designType = designType ,orientation = orientation,pointSize = 3)$result
#' @param dist_inter distance between rows of palm trees (m)
#' @param dist_intercrop distance between multiple rows of palm trees (m), for intercropping
#' @param designType type of design (square,quincunx,quincunx2,quincunx3,quincunx4,quincunx5)
#' @param orientation orientation of the scene ('NS': North-South or 'EW': East-West)
#' @param pointSize size of point in the plot
#'
#' @return
#' @export
#'
#' @examples
generate_design=function(dist_intra=dist_intra,dist_inter=dist_inter,dist_intercrop=dist_intercrop,designType=designType,orientation=orientation,pointSize=5){
# l=9.21
# h=sqrt(3*l**2/4)
# dist_intra=l
# dist_intercrop=2*h
# dist_inter=h
# designType='square'
if (!designType %in% c('square','quincunx','quincunx2','quincunx3','quincunx4','quincunx5')){
print('please select a designType among square quincunx quincunx2  quincunx3 quincunx4 quincunx5')
return(NULL)
}
# Voronoi of the design:
if (designType=='square'){
if(!is.null(dist_intercrop)){
print('dist_intercrop is not considered in square design')
return(NULL)}
x1=dist_inter/2
y1=dist_intra/2
xmax=x1+dist_inter/2
ymax=y1+dist_intra/2
voronoi_plot=data.frame(x= x1,
y= y1,
xmin= 0,xmax=xmax,
ymin= 0, ymax= ymax)
}
if (designType=='quincunx'){
if(!is.null(dist_intercrop)){
print('dist_intercrop is not considered in quinconx design')
return(NULL)}
x1=dist_inter/2
y1=dist_intra/4
x2=dist_inter/2+dist_inter
y2=dist_intra/4+dist_intra/2
xmax=x2+dist_inter/2
ymax=y2+dist_intra/4
voronoi_plot=data.frame(x= c(x1,x2),
y= c(y1,y2),
xmin= 0,xmax=xmax,
ymin= 0, ymax= ymax)
}
if (designType=='quincunx2'){
if(is.null(dist_intercrop)){
print('please provide dist_intercrop in quinconx2 design')
return(NULL)}
x1=dist_inter/2
y1=dist_intra/4
x2=dist_inter/2+dist_intercrop
y2=dist_intra/4+dist_intra/2
xmax=dist_inter+dist_intercrop
ymax=dist_intra
voronoi_plot= data.frame(x= c(x1,x2),
y= c(y1,y2),
xmin= 0,xmax=xmax,
ymin= 0, ymax= ymax)
}
if (designType=='quincunx3'){
if(is.null(dist_intercrop)){
print('please provide dist_intercrop in quinconx3 design')
return(NULL)}
x1=dist_inter/2
y1=dist_intra/4
x2=x1+dist_inter
y2=y1+dist_intra/2
x3=x2+dist_intercrop
y3=y2
xmax=x3+dist_inter/2
ymax=y3+dist_intra/4
voronoi_plot= data.frame(x= c(x1,x2,x3),
y= c(y1,y2,y3),
xmin= 0, xmax= xmax,
ymin= 0, ymax= ymax)
}
if (designType=='quincunx4'){
if(is.null(dist_intercrop)){
print('please provide dist_intercrop in quinconx4 design')
return(NULL)}
x1=dist_inter/2
y1=dist_intra/4
x2=x1+dist_inter
y2=y1+dist_intra/2
x3=x2+dist_intercrop
y3=y1
x4=x3+dist_inter
y4=y2
xmax=x4+dist_inter/2
ymax=y4+dist_intra/4
voronoi_plot= data.frame(x= c(x1,x2,x3,x4),
y= c(y1,y2,y3,y4),
xmin= 0, xmax= xmax,
ymin= 0, ymax= ymax)
}
if (designType=='quincunx5'){
if(is.null(dist_intercrop)){
print('please provide dist_intercrop in quinconx5 design')
return(NULL)}
x1=dist_inter/2
y1=dist_intra/4
x2=x1+dist_inter
y2=y1+dist_intra/2
x3=x2+dist_intercrop
y3=y2
x4=x3+dist_inter
y4=y1
x5=x4+dist_inter
y5=y3
xmax=x5+dist_inter/2
ymax=y5+dist_intra/4
voronoi_plot= data.frame(x= c(x1,x2,x3,x4,x5),
y= c(y1,y2,y3,y4,y5),
xmin= 0, xmax= xmax,
ymin= 0, ymax= ymax)
}
if (designType %in% c('square','quincunx')){
dist_intercrop=0}
# number of raow and columns in 1 ha
repRows=ceiling(100/dist_inter+dist_intercrop)
repCol=ceiling(100/dist_intra)
# number of raow and columns in 1 ha
# Matrix of the design (each cell is a Voronoi):
mat_plot= expand.grid(repRows= 1:repRows, repCol= 1:repCol)
# density
density=floor(nrow(voronoi_plot)/(unique(voronoi_plot$xmax)*unique(voronoi_plot$ymax))*10000)
# Full design:
design=
mapply(function(repRows,repCol){
voronoi_plot%>%
dplyr::select(x,y,xmax,ymax,xmin,ymin)%>%
dplyr::mutate(xmin= xmax*(repRows-1), ymin= ymax*(repCol-1),
x= x+xmin, y= y+ymin,
xmax= xmax*repCol, ymax= ymax*repRows,
repCol= repCol, repRows= repRows)
}, repRows= mat_plot$repRows, repCol= mat_plot$repCol)%>%t()%>%
dplyr::as_tibble()%>%
tidyr::unnest(cols = c(x, y, xmax, ymax, xmin, ymin, repCol, repRows))%>%
dplyr::mutate(xmax= max(xmax), ymax= max(ymax),
xmin= min(xmin), ymin= min(ymin))
# plot:
if(orientation=='NS'){
plot_bounds=
design%>%
ggplot2::ggplot(ggplot2::aes(x= x, y= y))+
ggplot2::geom_point(shape=8,col='forestgreen',size=pointSize)+
ylab('Intra row distance (m)')+
xlab('Inter row distance (m)')+
xlim(c(0,100))+
ylim(c(0,100))+
ggtitle(paste(density,' plants.ha-1'))+
coord_equal()+
myTheme
}
if(orientation=='EW'){
plot_bounds=design%>%
ggplot2::ggplot(ggplot2::aes(x= y, y= x))+
ggplot2::geom_point(shape=8,col='forestgreen',size=pointSize)+
xlab('Intra row distance (m)')+
ylab('Inter row distance (m)')+
xlim(c(0,100))+
ylim(c(0,100))+
ggtitle(paste(density,' plants.ha-1'))+
coord_equal()+
myTheme
}
im=readPNG("north.png")
visu=ggdraw() +
draw_plot(plot_bounds) +
draw_image(im,x = 0.4,y = 0.4,scale=0.1)
# result to export scene pattern
result=
voronoi_plot%>%
dplyr::mutate(z= 0.0, scale= 1.0,
inclinationAzimut= 0.0, inclinationAngle= 0.0,
stemTwist= 0.0)
list(design=design,result= result, plot= visu,density=density)
}
des=generate_design(dist_inter =dist_inter, dist_intra=dist_intra,dist_intercrop =dist_intercrop,designType = designType,orientation = orientation,pointSize = 3)$result
create.ops(opfname =paramFileName ,dist_inter = d_inter,dist_intra = d_intra,designType = designType,dist_intercrop =d_intercrop,orientation =orientation,  writeOPS = T,pathOPS = pathOPS)
## save planting design
print('saving planting design')
generate_design(dist_inter =dist_inter, dist_intra=dist_intra,dist_intercrop =d_intercrop,designType = designType ,orientation = orientation,pointSize = 3)$result
# Load packages -----------------------------------------------------------
# install.packages("devtools")
# devtools::install_github("VEZY/Vpalmr")
packs <- c("lubridate", "stringr", 'tidyverse','viridis','Vpalmr','data.table','yaml')
InstIfNec<-function (pack) {
if (!do.call(require,as.list(pack))) {
do.call(install.packages,as.list(pack))  }
do.call(require,as.list(pack)) }
lapply(packs, InstIfNec)
source('./1-code/helpers.R')
source('./1-code/Mapping_light.R')
# inputs ------------------------------------------------------------------
MAP=180
d_inter=7.8
d_intra=9
d_intercrop=NULL
designType='quincunx'
path_designs='./2-outputs/Run_simu/planting_designs/'
pathVpalmParam='./2-outputs/Generate_VPalm_param/'
pathArchimed='./1-code/archimed-phys.jar'
pathVpalmJar='./1-code/vpalm_biomech.jar'
pathOpf='./2-outputs/Run_simu/ops/opf/'
pathOPS='./2-outputs/Run_simu/ops/'
opfStepExport=14
orientation='NS'
RunSimu(d_inter=d_inter,d_intra=d_intra,d_intercrop =d_intercrop,designType =designType,  MAP=MAP,pathVpalmParam=pathVpalmParam,pathArchimed=pathArchimed,path_designs=path_designs,pathVpalmJar=pathVpalmJar,pathOpf=pathOpf,pathOPS=pathOPS,run_photosynthesis=T,opfStepExport=opfStepExport,overwrite =T,orientation=orientation)
Create_map(d_inter =d_inter ,d_intra = d_intra,designType = designType,d_intercrop =d_intercrop, path_designs = path_designs,paramFileName=paramFileName,orientation = orientation)
#### map
paramFileName=paste0('Mockup_seed1_MAP_',MAP)
Create_map(d_inter =d_inter ,d_intra = d_intra,designType = designType,d_intercrop =d_intercrop, path_designs = path_designs,paramFileName=paramFileName,orientation = orientation)
l=12
h=9
i=12
a1=generate_design(dist_intra = l,dist_inter = h,dist_intercrop =i ,designType = 'quincunx2',orientation = "NS",pointSize = 3)$plot
a2=generate_design(dist_intra = l,dist_inter = h,dist_intercrop =i ,designType = 'quincunx2',orientation = "EW",pointSize = 3)$plot
plot_grid(a1,a2,ncol=2)
l=12
h=9
i=12
a1=generate_design(dist_intra = l,dist_inter = h,dist_intercrop =i ,designType = 'quincunx2',orientation = "NS",pointSize = 3)$plot
a2=generate_design(dist_intra = l,dist_inter = h,dist_intercrop =i ,designType = 'quincunx2',orientation = "EW",pointSize = 3)$plot
plot_grid(a1,a2,ncol=2)
l=9
h=sqrt(3*(l**2)/4)
i=12
a1=generate_design(dist_intra = l,dist_inter = h,dist_intercrop =i ,designType = 'quincunx3',orientation = "NS",pointSize = 3)$plot
a2=generate_design(dist_intra = l,dist_inter = h,dist_intercrop =i ,designType = 'quincunx3',orientation = "EW",pointSize = 3)$plot
plot_grid(a1,a2,ncol=2)
