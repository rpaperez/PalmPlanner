plot_grid(gr1,gr2,gr3,gr4,gr5,gr6)
gr1=plot_design(dist_intra =dist_intra,dist_inter =dist_inter,designType ='quincunx',dist_intercrop =dist_intercrop,orientation = orientation,twist = twist,pointSize =pointSize,lim = lim)$plot+ggtitle('quincunx')
gr2=plot_design(dist_intra =dist_intra,dist_inter =dist_inter,designType ='square',dist_intercrop =dist_intercrop,orientation = orientation,twist = twist,pointSize =pointSize,lim = lim)$plot+ggtitle('square')
gr3=plot_design(dist_intra =dist_intra,dist_inter =dist_inter,designType ='quincunx2',dist_intercrop =10,orientation = orientation,twist = twist,pointSize =pointSize,lim = lim)$plot+ggtitle('quincunx2')
gr4=plot_design(dist_intra =dist_intra,dist_inter =dist_inter,designType ='square2',dist_intercrop =10,orientation = orientation,twist = twist,pointSize =pointSize,lim = lim)$plot+ggtitle('square2')
gr5=plot_design(dist_intra =dist_intra,dist_inter =dist_inter,designType ='quincunx3',dist_intercrop =10,orientation = orientation,twist = twist,pointSize =pointSize,lim=lim )$plot+ggtitle('quincunx3')
gr6=plot_design(dist_intra =dist_intra,dist_inter =dist_inter,designType ='quincunx4',dist_intercrop =10,orientation = orientation,twist = twist,pointSize =pointSize,lim=lim )$plot+ggtitle('quincunx4')
gr7=plot_design(dist_intra =dist_intra,dist_inter =dist_inter,designType ='quincunx5',dist_intercrop =10,orientation = orientation,twist = twist,pointSize =pointSize,lim=lim )$plot+ggtitle('quincunx5')
plot_grid(gr1,gr2,gr3,gr4,gr5,gr6)
lim=60
orientation='NS'
twist=0
pointSize=3
gr1=plot_design(dist_intra =dist_intra,dist_inter =dist_inter,designType ='quincunx',dist_intercrop =dist_intercrop,orientation = orientation,twist = twist,pointSize =pointSize,lim = lim)$plot+ggtitle('quincunx')
gr2=plot_design(dist_intra =dist_intra,dist_inter =dist_inter,designType ='square',dist_intercrop =dist_intercrop,orientation = orientation,twist = twist,pointSize =pointSize,lim = lim)$plot+ggtitle('square')
gr3=plot_design(dist_intra =dist_intra,dist_inter =dist_inter,designType ='quincunx2',dist_intercrop =10,orientation = orientation,twist = twist,pointSize =pointSize,lim = lim)$plot+ggtitle('quincunx2')
gr4=plot_design(dist_intra =dist_intra,dist_inter =dist_inter,designType ='square2',dist_intercrop =10,orientation = orientation,twist = twist,pointSize =pointSize,lim = lim)$plot+ggtitle('square2')
gr5=plot_design(dist_intra =dist_intra,dist_inter =dist_inter,designType ='quincunx3',dist_intercrop =10,orientation = orientation,twist = twist,pointSize =pointSize,lim=lim )$plot+ggtitle('quincunx3')
gr6=plot_design(dist_intra =dist_intra,dist_inter =dist_inter,designType ='quincunx4',dist_intercrop =10,orientation = orientation,twist = twist,pointSize =pointSize,lim=lim )$plot+ggtitle('quincunx4')
gr7=plot_design(dist_intra =dist_intra,dist_inter =dist_inter,designType ='quincunx5',dist_intercrop =10,orientation = orientation,twist = twist,pointSize =pointSize,lim=lim )$plot+ggtitle('quincunx5')
plot_grid(gr1,gr2,gr3,gr4,gr5,gr6)
dist_inter=7
dist_intra=3
lim=60
orientation='NS'
twist=0
pointSize=3
gr1=plot_design(dist_intra =dist_intra,dist_inter =dist_inter,designType ='quincunx',dist_intercrop =dist_intercrop,orientation = orientation,twist = twist,pointSize =pointSize,lim = lim)$plot+ggtitle('quincunx')
gr2=plot_design(dist_intra =dist_intra,dist_inter =dist_inter,designType ='square',dist_intercrop =dist_intercrop,orientation = orientation,twist = twist,pointSize =pointSize,lim = lim)$plot+ggtitle('square')
gr3=plot_design(dist_intra =dist_intra,dist_inter =dist_inter,designType ='quincunx2',dist_intercrop =10,orientation = orientation,twist = twist,pointSize =pointSize,lim = lim)$plot+ggtitle('quincunx2')
gr4=plot_design(dist_intra =dist_intra,dist_inter =dist_inter,designType ='square2',dist_intercrop =10,orientation = orientation,twist = twist,pointSize =pointSize,lim = lim)$plot+ggtitle('square2')
gr5=plot_design(dist_intra =dist_intra,dist_inter =dist_inter,designType ='quincunx3',dist_intercrop =10,orientation = orientation,twist = twist,pointSize =pointSize,lim=lim )$plot+ggtitle('quincunx3')
gr6=plot_design(dist_intra =dist_intra,dist_inter =dist_inter,designType ='quincunx4',dist_intercrop =10,orientation = orientation,twist = twist,pointSize =pointSize,lim=lim )$plot+ggtitle('quincunx4')
gr7=plot_design(dist_intra =dist_intra,dist_inter =dist_inter,designType ='quincunx5',dist_intercrop =10,orientation = orientation,twist = twist,pointSize =pointSize,lim=lim )$plot+ggtitle('quincunx5')
plot_grid(gr1,gr2,gr3,gr4,gr5,gr6)
dist_inter=6
dist_intra=3
lim=60
orientation='NS'
twist=0
pointSize=3
gr1=plot_design(dist_intra =dist_intra,dist_inter =dist_inter,designType ='quincunx',dist_intercrop =dist_intercrop,orientation = orientation,twist = twist,pointSize =pointSize,lim = lim)$plot+ggtitle('quincunx')
gr2=plot_design(dist_intra =dist_intra,dist_inter =dist_inter,designType ='square',dist_intercrop =dist_intercrop,orientation = orientation,twist = twist,pointSize =pointSize,lim = lim)$plot+ggtitle('square')
gr3=plot_design(dist_intra =dist_intra,dist_inter =dist_inter,designType ='quincunx2',dist_intercrop =10,orientation = orientation,twist = twist,pointSize =pointSize,lim = lim)$plot+ggtitle('quincunx2')
gr4=plot_design(dist_intra =dist_intra,dist_inter =dist_inter,designType ='square2',dist_intercrop =10,orientation = orientation,twist = twist,pointSize =pointSize,lim = lim)$plot+ggtitle('square2')
gr5=plot_design(dist_intra =dist_intra,dist_inter =dist_inter,designType ='quincunx3',dist_intercrop =10,orientation = orientation,twist = twist,pointSize =pointSize,lim=lim )$plot+ggtitle('quincunx3')
gr6=plot_design(dist_intra =dist_intra,dist_inter =dist_inter,designType ='quincunx4',dist_intercrop =10,orientation = orientation,twist = twist,pointSize =pointSize,lim=lim )$plot+ggtitle('quincunx4')
gr7=plot_design(dist_intra =dist_intra,dist_inter =dist_inter,designType ='quincunx5',dist_intercrop =10,orientation = orientation,twist = twist,pointSize =pointSize,lim=lim )$plot+ggtitle('quincunx5')
plot_grid(gr1,gr2,gr3,gr4,gr5,gr6)
ggsave(filename = '2-outputs/examples.pdf',width = 800)
ggsave(filename = '2-outputs/examples.pdf',width = 80)
ggsave(filename = '2-outputs/examples.pdf',width = 12)
ggsave(filename = '2-outputs/examples.pdf',width = 15,height = 12)
runApp('App_design.R')
runApp('App_design.R')
source('./1-code/helpers_App_Design.R')
dist_inter=6
dist_intra=3
lim=60
orientation='NS'
twist=0
pointSize=3
gr1=plot_design(dist_intra =dist_intra,dist_inter =dist_inter,designType ='quincunx',dist_intercrop =dist_intercrop,orientation = orientation,twist = twist,pointSize =pointSize,lim = lim)$plot+ggtitle('quincunx')
gr2=plot_design(dist_intra =dist_intra,dist_inter =dist_inter,designType ='square',dist_intercrop =dist_intercrop,orientation = orientation,twist = twist,pointSize =pointSize,lim = lim)$plot+ggtitle('square')
gr3=plot_design(dist_intra =dist_intra,dist_inter =dist_inter,designType ='quincunx2',dist_intercrop =10,orientation = orientation,twist = twist,pointSize =pointSize,lim = lim)$plot+ggtitle('quincunx2')
gr4=plot_design(dist_intra =dist_intra,dist_inter =dist_inter,designType ='square2',dist_intercrop =10,orientation = orientation,twist = twist,pointSize =pointSize,lim = lim)$plot+ggtitle('square2')
gr5=plot_design(dist_intra =dist_intra,dist_inter =dist_inter,designType ='quincunx3',dist_intercrop =10,orientation = orientation,twist = twist,pointSize =pointSize,lim=lim )$plot+ggtitle('quincunx3')
gr6=plot_design(dist_intra =dist_intra,dist_inter =dist_inter,designType ='quincunx4',dist_intercrop =10,orientation = orientation,twist = twist,pointSize =pointSize,lim=lim )$plot+ggtitle('quincunx4')
gr7=plot_design(dist_intra =dist_intra,dist_inter =dist_inter,designType ='quincunx5',dist_intercrop =10,orientation = orientation,twist = twist,pointSize =pointSize,lim=lim )$plot+ggtitle('quincunx5')
plot_grid(gr1,gr2,gr3,gr4,gr5,gr6)
ggsave(filename = '2-outputs/examples.png',width = 15,height = 12)
runApp('App_design.R')
test=plot_design(dist_intra =dist_intra,dist_inter =dist_inter,designType ='square',dist_intercrop =dist_intercrop,orientation = orientation,twist = twist,pointSize =pointSize,lim = lim)
test$design
design=test
design$design$x
design$design$x-min(design$design$x)
design$design$x=design$design$x-design$design$x[1]
design$design$x
runApp('App_design.R')
222-150
(222-150)/150
tableDesign=data.frame(designRef=c('square','quincunx',"square2",'quincunx2',"square3",'quincunx3',"square4",'quincunx4',"square5",'quincunx5'),
designType=c('square','quincunx','square','quincunx','square','quincunx','square','quincunx','square','quincunx'),
NbR=c(NA,NA,"1/3","1/3","1/4","1/4","1/5","1/5","1/6","1/6"))
tableDesign
library(shiny); runApp('App_design.R')
tableDesign
tableDesign=data.frame(designRef=c('square','quincunx',"square2",'quincunx2',"square3",'quincunx3',"square4",'quincunx4',"square5",'quincunx5'),
designType=c('square','quincunx','square','quincunx','square','quincunx','square','quincunx','square','quincunx'),
NbR=c('0','0',"1/3","1/3","1/4","1/4","1/5","1/5","1/6","1/6"))
NbRemoved='0'
#### map
# print(paste('dist_intra',d_intra))
# print(paste('dist_inter',d_inter))
# print(paste('dist_intercrop',dist_intercrop))
# print(paste('designType',designType))
# print(paste('orientation',orientation))
# print(paste('lim',lim))
designRef=tableDesign %>% filter(designType==designType & NbR==NbRemoved)
designRef
#### map
# print(paste('dist_intra',d_intra))
# print(paste('dist_inter',d_inter))
# print(paste('dist_intercrop',dist_intercrop))
# print(paste('designType',designType))
# print(paste('orientation',orientation))
# print(paste('lim',lim))
designRef=tableDesign %>% filter(designType==designType & NbR==NbRemoved) %>% select(designRef)
designRef
designType
designType
designType=='saure'
designType='square'
packs <- c('shiny','shinythemes','shinycssloaders',"lubridate", "stringr", 'tidyverse','viridis','plotly')
#### map
# print(paste('dist_intra',d_intra))
# print(paste('dist_inter',d_inter))
# print(paste('dist_intercrop',dist_intercrop))
# print(paste('designType',designType))
# print(paste('orientation',orientation))
# print(paste('lim',lim))
designRef=tableDesign %>% filter(designType==designType & NbR==NbRemoved) %>% select(designRef)
designRef
designType
NbRemoved
tableDesign %>% filter(designType==designType & NbR==NbRemoved)
packs <- c('shiny','shinythemes','shinycssloaders',"lubridate", "stringr", 'tidyverse','viridis','plotly')
designType
tableDesign %>% filter(designType==designType & NbR==NbRemoved)
NbRemoved
designType
tableDesign
tableDesign %>% filter(designType==designType & NbR==NbRemoved)
packs <- c('shiny','shinythemes','shinycssloaders',"lubridate", "stringr", 'tidyverse','viridis','plotly')
InstIfNec<-function (pack) {
if (!do.call(require,as.list(pack))) {
do.call(install.packages,as.list(pack))  }
do.call(require,as.list(pack))}
lapply(packs, InstIfNec)
myTheme=theme_minimal() %+replace%
theme(
panel.background = element_rect(fill = "white",
colour = NA), panel.border = element_rect(fill = NA,
colour = "grey20"),
text = element_text( face = "plain",  size = 14,
angle = 0, lineheight = 0.9),
plot.title = element_text(size = rel(1.2)),
axis.text = element_text(face = "plain", size = 10)
)
tableDesign=data.frame(designRef=c('square','quincunx',"square2",'quincunx2',"square3",'quincunx3',"square4",'quincunx4',"square5",'quincunx5'),
designType=c('square','quincunx','square','quincunx','square','quincunx','square','quincunx','square','quincunx'),
NbR=c('0','0',"1/3","1/3","1/4","1/4","1/5","1/5","1/6","1/6"))
tableDesign
designType='square'
NbRemoved=='1/4'
NbRemoved='1/4'
#### map
# print(paste('dist_intra',d_intra))
# print(paste('dist_inter',d_inter))
# print(paste('dist_intercrop',dist_intercrop))
# print(paste('designType',designType))
# print(paste('orientation',orientation))
# print(paste('lim',lim))
designRef=tableDesign %>% filter(designType==designType & NbR==NbRemoved) %>% select(designRef)
designRef
NbRemoved='0'
#### map
# print(paste('dist_intra',d_intra))
# print(paste('dist_inter',d_inter))
# print(paste('dist_intercrop',dist_intercrop))
# print(paste('designType',designType))
# print(paste('orientation',orientation))
# print(paste('lim',lim))
designRef=tableDesign %>% filter(designType==designType & NbR==NbRemoved) %>% select(designRef)
designRef
designRef
tableDesign
designType
tableDesign %>% filter(designType==designType && NbR==NbRemoved)
#### map
# print(paste('dist_intra',d_intra))
# print(paste('dist_inter',d_inter))
# print(paste('dist_intercrop',dist_intercrop))
# print(paste('designType',designType))
# print(paste('orientation',orientation))
# print(paste('lim',lim))
designRef=tableDesign %>% filter(designType==designType) %>% filter(NbR==NbRemoved) %>% select(designRef)
designRef
tableDesign %>% filter(designType==designType)
designType
tableDesign=data.frame(designRef=c('square','quincunx',"square2",'quincunx2',"square3",'quincunx3',"square4",'quincunx4',"square5",'quincunx5'),
design=c('square','quincunx','square','quincunx','square','quincunx','square','quincunx','square','quincunx'),
NbR=c('0','0',"1/3","1/3","1/4","1/4","1/5","1/5","1/6","1/6"))
tableDesign
tableDesign %>% filter(design==designType & NbR==NbRemoved)
#### map
# print(paste('dist_intra',d_intra))
# print(paste('dist_inter',d_inter))
# print(paste('dist_intercrop',dist_intercrop))
# print(paste('designType',designType))
# print(paste('orientation',orientation))
# print(paste('lim',lim))
designRef=tableDesign %>% filter(design==designType & NbR==NbRemoved) %>% select(designRef)
designRef
source('./1-code/helpers_App_Design.R')
#### map
# print(paste('dist_intra',d_intra))
# print(paste('dist_inter',d_inter))
# print(paste('dist_intercrop',dist_intercrop))
# print(paste('designType',designType))
# print(paste('orientation',orientation))
# print(paste('lim',lim))
designRef=tableDesign %>% filter(design==designType & NbR==NbRemoved) %>% select(designRef)
design=plot_design(dist_intra=d_intra,dist_inter=d_inter,dist_intercrop=dist_intercrop,designType=designRef[1],orientation=orientation,pointSize=pointSize,lim=lim,twist=0)
runApp('App_design.R')
runApp('App_design.R')
runApp('App_design.R')
#
if (require('Vpalmr')==F){
install.packages("devtools")
devtools::install_github("VEZY/Vpalmr")
}
lapply(packs, InstIfNec)
# We'll use the input$controller variable multiple times, so save it as x
# for convenience.
x <- input$controller
## Only run examples in interactive R sessions
if (interactive()) {
ui <- fluidPage(
sliderInput("controller", "Controller", 0, 20, 10),
numericInput("inNumber", "Input number", 0),
numericInput("inNumber2", "Input number 2", 0)
)
server <- function(input, output, session) {
observeEvent(input$controller, {
# We'll use the input$controller variable multiple times, so save it as x
# for convenience.
x <- input$controller
updateNumericInput(session, "inNumber", value = x)
updateNumericInput(session, "inNumber2",
label = paste("Number label ", x),
value = x, min = x-10, max = x+10, step = 5)
})
}
shinyApp(ui, server)
}
server <- function(input, output, session) {
observeEvent(input$controller, {
# We'll use the input$controller variable multiple times, so save it as x
# for convenience.
x <- input$controller
updateNumericInput(session, "inNumber", value = x)
updateNumericInput(session, "inNumber2",
label = paste("Number label ", x),
value = x, min = x-10, max = x+10, step = 5)
})
}
observeEvent(input$controller, {
# We'll use the input$controller variable multiple times, so save it as x
# for convenience.
x <- input$controller
updateNumericInput(session, "inNumber", value = x)
updateNumericInput(session, "inNumber2",
label = paste("Number label ", x),
value = x, min = x-10, max = x+10, step = 5)
})
## Only run examples in interactive R sessions
if (interactive()) {
ui <- fluidPage(
sliderInput("controller", "Controller", 0, 20, 10),
numericInput("inNumber", "Input number", 0),
numericInput("inNumber2", "Input number 2", 0)
)
server <- function(input, output, session) {
observeEvent(input$controller, {
# We'll use the input$controller variable multiple times, so save it as x
# for convenience.
x <- input$controller
updateNumericInput(session, "inNumber", value = x)
updateNumericInput(session, "inNumber2",
label = paste("Number label ", x),
value = x, min = x-10, max = x+10, step = 5)
})
}
shinyApp(ui, server)
}
runApp('App_design.R')
# We'll use the input$controller variable multiple times, so save it as x
# for convenience.
x <- input$inNumber
updateNumericInput(session, "inNumber", value = x)
ui <- fluidPage(
# sliderInput("controller", "Controller", 0, 20, 10),
numericInput("inNumber", "Input number", 0)
# numericInput("inNumber2", "Input number 2", 0)
)
server <- function(input, output, session) {
observeEvent(input$inNumber, {
# We'll use the input$controller variable multiple times, so save it as x
# for convenience.
x <- input$inNumber
updateNumericInput(session, "inNumber", value = x)
# updateNumericInput(session, "inNumber2",
# label = paste("Number label ", x),
# value = x, min = x-10, max = x+10, step = 5)
})
}
shinyApp(ui, server)
}
if (x>3){
updateNumericInput(session, "inNumber", value = x-1)
}
if (input$inNumber>3){
updateNumericInput(session, "inNumber", value = input$inNumber-1)
}
observeEvent(input$inNumber, {
# We'll use the input$controller variable multiple times, so save it as x
# for convenience.
if (input$inNumber>3){
updateNumericInput(session, "inNumber", value = input$inNumber-1)
}
# updateNumericInput(session, "inNumber2",
# label = paste("Number label ", x),
# value = x, min = x-10, max = x+10, step = 5)
})
## Only run examples in interactive R sessions
if (interactive()) {
ui <- fluidPage(
# sliderInput("controller", "Controller", 0, 20, 10),
numericInput("inNumber", "Input number", 0)
# numericInput("inNumber2", "Input number 2", 0)
)
server <- function(input, output, session) {
observeEvent(input$inNumber, {
# We'll use the input$controller variable multiple times, so save it as x
# for convenience.
if (input$inNumber>3){
updateNumericInput(session, "inNumber", value = input$inNumber-1)
}
# updateNumericInput(session, "inNumber2",
# label = paste("Number label ", x),
# value = x, min = x-10, max = x+10, step = 5)
})
}
shinyApp(ui, server)
}
runApp('App_design.R')
tableDesign
runApp('App_design.R')
runApp('App_design.R')
shinyApp(
ui = basicPage(
textInput("txt", "Enter the text to display below:"),
textOutput("text"),
verbatimTextOutput("verb")
),
server = function(input, output) {
output$text <- renderText({ input$txt })
output$verb <- renderText({ input$txt })
}
)
shinyApp(
ui = basicPage(
textInput("txt", "Enter the text to display below:"),
textOutput("text"),
verbatimTextOutput("verb")
),
server = function(input, output) {
output$text <- renderText({ input$txt })
output$verb <- renderText({ input$txt })
}
)
runApp('App_design.R')
runApp('App_design.R')
runApp('App_design.R')
tableDesign
tableDesign=data.frame(designRef=c('square','quincunx',"square2",'quincunx2',"square3",'quincunx3',"square4",'quincunx4',"square5",'quincunx5'),
design=c('square','quincunx','square','quincunx','square','quincunx','square','quincunx','square','quincunx'),
NbR=c('0','0',"1/3","1/3","1/4","1/4","1/5","1/5","1/6","1/6"),
NbLines=c('1','1','2','2','3','3','4','4','5','5'))
tableDesign
runApp('App_design.R')
tableDesign
NbLines_I1='1'
tableDesign
designType
NbRemoved
NbLines_I1
designType_I1
designType_I1='square'
# print(paste('_____inter_dist_I1',inter_dist_I1))
# print(paste('_____intra_dist_I1',intra_dist_I1))
# print(paste('_____designType_I1',designType_I1))
designRef_I1=tableDesign %>% filter(design==designType_I1 & NbLines==NbLines_I1) %>% select(designRef)
designRef_I1
dist_intra
d_intra=4
d_inter=5
dist_intercrop=10
orientation
orientation='NS'
pointSize=2
lim=50
intra_dist_I1
intra_dist_I1=2
inter_dist_I1=1
designRef_I1[1]
I1=design_intercrop(dist_intra =d_intra,dist_inter =d_inter,designType =designRef[1],dist_intercrop =dist_intercrop,orientation = orientation,twist = 0,pointSize =pointSize,lim = lim, I_dist_intra = intra_dist_I1,I_dist_inter =inter_dist_I1,I_designType = designRef_I1[1])
designRef_I1[1]
designRef_I1
designRef[1]
### get distance between intercrop edge and palms row
dist_edge=(dist_intercrop-sizeDesign[sizeDesign==I_designType,]$interLines*I_dist_inter)/2
I_designType = designRef_I1[1]
I_dist_inter =inter_dist_I1
I_dist_intra = intra_dist_I1
twist = 0
designType =designRef[1]
### get distance between intercrop edge and palms row
dist_edge=(dist_intercrop-sizeDesign[sizeDesign==I_designType,]$interLines*I_dist_inter)/2
dist_intercrop
sizeDesign
I_designType
tableDesign
tableDesign %>% filter(design==designType_I1 & NbLines==NbLines_I1)
# print(paste('_____inter_dist_I1',inter_dist_I1))
# print(paste('_____intra_dist_I1',intra_dist_I1))
# print(paste('_____designType_I1',designType_I1))
designRef_I1=tableDesign %>% filter(design==designType_I1 & NbLines==NbLines_I1) %>% select(designRef)
designRef_I1
I_designType
sizeDesign[sizeDesign==I_designType,]
sizeDesign[sizeDesign=='square',]
designRef_I1
designRef_I1[[1]]
I1=design_intercrop(dist_intra =d_intra,dist_inter =d_inter,designType =designRef[1],dist_intercrop =dist_intercrop,orientation = orientation,twist = 0,pointSize =pointSize,lim = lim, I_dist_intra = intra_dist_I1,I_dist_inter =inter_dist_I1,I_designType = designRef_I1[[1]])
I_designType = designRef_I1[[1]]
### get distance between intercrop edge and palms row
dist_edge=(dist_intercrop-sizeDesign[sizeDesign==I_designType,]$interLines*I_dist_inter)/2
if(designType %in% c('square','quincunx')){
dist_intercrop=0
dist_edge=(dist_inter-sizeDesign[sizeDesign==I_designType,]$interLines*I_dist_inter)/2
if(I_designType %in% c('square','quincunx')){
dist_edge=dist_inter/2
}
}
dist_inter =d_inter
dist_intra =d_intra
I1=design_intercrop(dist_intra =d_intra,dist_inter =d_inter,designType =designRef[[1]],dist_intercrop =dist_intercrop,orientation = orientation,twist = 0,pointSize =pointSize,lim = lim, I_dist_intra = intra_dist_I1,I_dist_inter =inter_dist_I1,I_designType = designRef_I1[[1]])
runApp('App_design.R')
I1=design_intercrop(dist_intra =d_intra,dist_inter =d_inter,designType =designRef[[1]],dist_intercrop =dist_intercrop,orientation = orientation,twist = 0,pointSize =pointSize,lim = lim, I_dist_intra = intra_dist_I1,I_dist_inter =inter_dist_I1,I_designType = designRef_I1[[1]])
tableColor=Int1
Int1
Int1='test'
gr=ggplot()+
geom_point(data=I1$designPalm,aes(x=x,y=y,col= 'palms'),shape=8,size=pointSize)+
geom_point(data=I1$designI,aes(x=x,y=y,col=Int1),size=max(1,pointSize-2),alpha=0.8)+
xlim(c(0,lim))+
ylim(c(0,lim))+
labs(col=NULL)+
ggtitle(paste(design$density,' palms.ha-1'))+
# scale_color_manual(values = list('palms'='forestgreen',Int1='orange'))+
coord_equal()+
myTheme
gr=ggplot()+
geom_point(data=I1$designPalm,aes(x=x,y=y,col= 'palms'),shape=8,size=pointSize)+
geom_point(data=I1$designI,aes(x=x,y=y,col=Int1),size=max(1,pointSize-2),alpha=0.8)+
xlim(c(0,lim))+
ylim(c(0,lim))+
labs(col=NULL)
ggplot()+
geom_point(data=I1$designPalm,aes(x=x,y=y,col= 'palms'),shape=8,size=pointSize)+
geom_point(data=I1$designI,aes(x=x,y=y,col=Int1),size=max(1,pointSize-2),alpha=0.8)+
xlim(c(0,lim))+
ylim(c(0,lim))+
labs(col=NULL)
runApp('App_design.R')
tableColor=c('forestrgreen','orange','red')
names(tableColor)
Int2=test2
Int2='test2'
tableColor=c('forestrgreen','orange','red')
names(tableColor)=c('palms',Int1,Int2)
tableColor
gr=ggplot()+
geom_point(data=I1$designPalm,aes(x=x,y=y,col= 'palms'),shape=8,size=pointSize)+
geom_point(data=I1$designI,aes(x=x,y=y,col=Int1),size=max(1,pointSize-2),alpha=0.8)+
xlim(c(0,lim))+
ylim(c(0,lim))+
labs(col=NULL)+
ggtitle(paste(design$density,' palms.ha-1'))+
scale_color_manual(values = tableColor)+
coord_equal()+
myTheme
ggplot()+
geom_point(data=I1$designPalm,aes(x=x,y=y,col= 'palms'),shape=8,size=pointSize)+
geom_point(data=I1$designI,aes(x=x,y=y,col=Int1),size=max(1,pointSize-2),alpha=0.8)+
xlim(c(0,lim))+
ylim(c(0,lim))+
labs(col=NULL)+
scale_color_manual(values = tableColor)
tableColor=c('forestgreen','orange','red')
names(tableColor)=c('palms',Int1,Int2)
ggplot()+
geom_point(data=I1$designPalm,aes(x=x,y=y,col= 'palms'),shape=8,size=pointSize)+
geom_point(data=I1$designI,aes(x=x,y=y,col=Int1),size=max(1,pointSize-2),alpha=0.8)+
xlim(c(0,lim))+
ylim(c(0,lim))+
labs(col=NULL)+
scale_color_manual(values = tableColor)
runApp('App_design.R')
